
robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dbc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001f54  08001f54  00011f54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001f6c  08001f6c  00011f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001f74  08001f74  00011f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001f78  08001f78  00011f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000130  2000000c  08001f88  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000013c  08001f88  0002013c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e320  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000020d4  00000000  00000000  0002e35c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006beb  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000009b8  00000000  00000000  00037020  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000cb0  00000000  00000000  000379d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004e1d  00000000  00000000  00038688  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003f2b  00000000  00000000  0003d4a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000413d0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001d10  00000000  00000000  0004144c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001f3c 	.word	0x08001f3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08001f3c 	.word	0x08001f3c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b97a 	b.w	80004e4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	468c      	mov	ip, r1
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	9e08      	ldr	r6, [sp, #32]
 8000214:	2b00      	cmp	r3, #0
 8000216:	d151      	bne.n	80002bc <__udivmoddi4+0xb4>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d96d      	bls.n	80002fa <__udivmoddi4+0xf2>
 800021e:	fab2 fe82 	clz	lr, r2
 8000222:	f1be 0f00 	cmp.w	lr, #0
 8000226:	d00b      	beq.n	8000240 <__udivmoddi4+0x38>
 8000228:	f1ce 0c20 	rsb	ip, lr, #32
 800022c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000230:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000234:	fa02 f70e 	lsl.w	r7, r2, lr
 8000238:	ea4c 0c05 	orr.w	ip, ip, r5
 800023c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000240:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000244:	0c25      	lsrs	r5, r4, #16
 8000246:	fbbc f8fa 	udiv	r8, ip, sl
 800024a:	fa1f f987 	uxth.w	r9, r7
 800024e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000252:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000256:	fb08 f309 	mul.w	r3, r8, r9
 800025a:	42ab      	cmp	r3, r5
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x6c>
 800025e:	19ed      	adds	r5, r5, r7
 8000260:	f108 32ff 	add.w	r2, r8, #4294967295
 8000264:	f080 8123 	bcs.w	80004ae <__udivmoddi4+0x2a6>
 8000268:	42ab      	cmp	r3, r5
 800026a:	f240 8120 	bls.w	80004ae <__udivmoddi4+0x2a6>
 800026e:	f1a8 0802 	sub.w	r8, r8, #2
 8000272:	443d      	add	r5, r7
 8000274:	1aed      	subs	r5, r5, r3
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb5 f0fa 	udiv	r0, r5, sl
 800027c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000280:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000284:	fb00 f909 	mul.w	r9, r0, r9
 8000288:	45a1      	cmp	r9, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x98>
 800028c:	19e4      	adds	r4, r4, r7
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 810a 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 8000296:	45a1      	cmp	r9, r4
 8000298:	f240 8107 	bls.w	80004aa <__udivmoddi4+0x2a2>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	eba4 0409 	sub.w	r4, r4, r9
 80002a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a8:	2100      	movs	r1, #0
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	d061      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80002b2:	2300      	movs	r3, #0
 80002b4:	6034      	str	r4, [r6, #0]
 80002b6:	6073      	str	r3, [r6, #4]
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	428b      	cmp	r3, r1
 80002be:	d907      	bls.n	80002d0 <__udivmoddi4+0xc8>
 80002c0:	2e00      	cmp	r6, #0
 80002c2:	d054      	beq.n	800036e <__udivmoddi4+0x166>
 80002c4:	2100      	movs	r1, #0
 80002c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ca:	4608      	mov	r0, r1
 80002cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d0:	fab3 f183 	clz	r1, r3
 80002d4:	2900      	cmp	r1, #0
 80002d6:	f040 808e 	bne.w	80003f6 <__udivmoddi4+0x1ee>
 80002da:	42ab      	cmp	r3, r5
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xdc>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80fa 	bhi.w	80004d8 <__udivmoddi4+0x2d0>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb65 0503 	sbc.w	r5, r5, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	46ac      	mov	ip, r5
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d03f      	beq.n	8000372 <__udivmoddi4+0x16a>
 80002f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	b912      	cbnz	r2, 8000302 <__udivmoddi4+0xfa>
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000302:	fab7 fe87 	clz	lr, r7
 8000306:	f1be 0f00 	cmp.w	lr, #0
 800030a:	d134      	bne.n	8000376 <__udivmoddi4+0x16e>
 800030c:	1beb      	subs	r3, r5, r7
 800030e:	0c3a      	lsrs	r2, r7, #16
 8000310:	fa1f fc87 	uxth.w	ip, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb3 f8f2 	udiv	r8, r3, r2
 800031a:	0c25      	lsrs	r5, r4, #16
 800031c:	fb02 3318 	mls	r3, r2, r8, r3
 8000320:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000324:	fb0c f308 	mul.w	r3, ip, r8
 8000328:	42ab      	cmp	r3, r5
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x134>
 800032c:	19ed      	adds	r5, r5, r7
 800032e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x132>
 8000334:	42ab      	cmp	r3, r5
 8000336:	f200 80d1 	bhi.w	80004dc <__udivmoddi4+0x2d4>
 800033a:	4680      	mov	r8, r0
 800033c:	1aed      	subs	r5, r5, r3
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb5 f0f2 	udiv	r0, r5, r2
 8000344:	fb02 5510 	mls	r5, r2, r0, r5
 8000348:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800034c:	fb0c fc00 	mul.w	ip, ip, r0
 8000350:	45a4      	cmp	ip, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x15c>
 8000354:	19e4      	adds	r4, r4, r7
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x15a>
 800035c:	45a4      	cmp	ip, r4
 800035e:	f200 80b8 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 040c 	sub.w	r4, r4, ip
 8000368:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800036c:	e79d      	b.n	80002aa <__udivmoddi4+0xa2>
 800036e:	4631      	mov	r1, r6
 8000370:	4630      	mov	r0, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	f1ce 0420 	rsb	r4, lr, #32
 800037a:	fa05 f30e 	lsl.w	r3, r5, lr
 800037e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000382:	fa20 f804 	lsr.w	r8, r0, r4
 8000386:	0c3a      	lsrs	r2, r7, #16
 8000388:	fa25 f404 	lsr.w	r4, r5, r4
 800038c:	ea48 0803 	orr.w	r8, r8, r3
 8000390:	fbb4 f1f2 	udiv	r1, r4, r2
 8000394:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000398:	fb02 4411 	mls	r4, r2, r1, r4
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003a4:	fb01 f30c 	mul.w	r3, r1, ip
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ae:	d909      	bls.n	80003c4 <__udivmoddi4+0x1bc>
 80003b0:	19ed      	adds	r5, r5, r7
 80003b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003b6:	f080 808a 	bcs.w	80004ce <__udivmoddi4+0x2c6>
 80003ba:	42ab      	cmp	r3, r5
 80003bc:	f240 8087 	bls.w	80004ce <__udivmoddi4+0x2c6>
 80003c0:	3902      	subs	r1, #2
 80003c2:	443d      	add	r5, r7
 80003c4:	1aeb      	subs	r3, r5, r3
 80003c6:	fa1f f588 	uxth.w	r5, r8
 80003ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80003ce:	fb02 3310 	mls	r3, r2, r0, r3
 80003d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d6:	fb00 f30c 	mul.w	r3, r0, ip
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1e6>
 80003de:	19ed      	adds	r5, r5, r7
 80003e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003e4:	d26f      	bcs.n	80004c6 <__udivmoddi4+0x2be>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	d96d      	bls.n	80004c6 <__udivmoddi4+0x2be>
 80003ea:	3802      	subs	r0, #2
 80003ec:	443d      	add	r5, r7
 80003ee:	1aeb      	subs	r3, r5, r3
 80003f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f4:	e78f      	b.n	8000316 <__udivmoddi4+0x10e>
 80003f6:	f1c1 0720 	rsb	r7, r1, #32
 80003fa:	fa22 f807 	lsr.w	r8, r2, r7
 80003fe:	408b      	lsls	r3, r1
 8000400:	fa05 f401 	lsl.w	r4, r5, r1
 8000404:	ea48 0303 	orr.w	r3, r8, r3
 8000408:	fa20 fe07 	lsr.w	lr, r0, r7
 800040c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000410:	40fd      	lsrs	r5, r7
 8000412:	ea4e 0e04 	orr.w	lr, lr, r4
 8000416:	fbb5 f9fc 	udiv	r9, r5, ip
 800041a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800041e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000422:	fa1f f883 	uxth.w	r8, r3
 8000426:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800042a:	fb09 f408 	mul.w	r4, r9, r8
 800042e:	42ac      	cmp	r4, r5
 8000430:	fa02 f201 	lsl.w	r2, r2, r1
 8000434:	fa00 fa01 	lsl.w	sl, r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x244>
 800043a:	18ed      	adds	r5, r5, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d243      	bcs.n	80004ca <__udivmoddi4+0x2c2>
 8000442:	42ac      	cmp	r4, r5
 8000444:	d941      	bls.n	80004ca <__udivmoddi4+0x2c2>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	441d      	add	r5, r3
 800044c:	1b2d      	subs	r5, r5, r4
 800044e:	fa1f fe8e 	uxth.w	lr, lr
 8000452:	fbb5 f0fc 	udiv	r0, r5, ip
 8000456:	fb0c 5510 	mls	r5, ip, r0, r5
 800045a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45a0      	cmp	r8, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x26e>
 8000466:	18e4      	adds	r4, r4, r3
 8000468:	f100 35ff 	add.w	r5, r0, #4294967295
 800046c:	d229      	bcs.n	80004c2 <__udivmoddi4+0x2ba>
 800046e:	45a0      	cmp	r8, r4
 8000470:	d927      	bls.n	80004c2 <__udivmoddi4+0x2ba>
 8000472:	3802      	subs	r0, #2
 8000474:	441c      	add	r4, r3
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba4 0408 	sub.w	r4, r4, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454c      	cmp	r4, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	464d      	mov	r5, r9
 8000488:	d315      	bcc.n	80004b6 <__udivmoddi4+0x2ae>
 800048a:	d012      	beq.n	80004b2 <__udivmoddi4+0x2aa>
 800048c:	b156      	cbz	r6, 80004a4 <__udivmoddi4+0x29c>
 800048e:	ebba 030e 	subs.w	r3, sl, lr
 8000492:	eb64 0405 	sbc.w	r4, r4, r5
 8000496:	fa04 f707 	lsl.w	r7, r4, r7
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431f      	orrs	r7, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	6037      	str	r7, [r6, #0]
 80004a2:	6074      	str	r4, [r6, #4]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004aa:	4618      	mov	r0, r3
 80004ac:	e6f8      	b.n	80002a0 <__udivmoddi4+0x98>
 80004ae:	4690      	mov	r8, r2
 80004b0:	e6e0      	b.n	8000274 <__udivmoddi4+0x6c>
 80004b2:	45c2      	cmp	sl, r8
 80004b4:	d2ea      	bcs.n	800048c <__udivmoddi4+0x284>
 80004b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ba:	eb69 0503 	sbc.w	r5, r9, r3
 80004be:	3801      	subs	r0, #1
 80004c0:	e7e4      	b.n	800048c <__udivmoddi4+0x284>
 80004c2:	4628      	mov	r0, r5
 80004c4:	e7d7      	b.n	8000476 <__udivmoddi4+0x26e>
 80004c6:	4640      	mov	r0, r8
 80004c8:	e791      	b.n	80003ee <__udivmoddi4+0x1e6>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e7be      	b.n	800044c <__udivmoddi4+0x244>
 80004ce:	4601      	mov	r1, r0
 80004d0:	e778      	b.n	80003c4 <__udivmoddi4+0x1bc>
 80004d2:	3802      	subs	r0, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	e745      	b.n	8000364 <__udivmoddi4+0x15c>
 80004d8:	4608      	mov	r0, r1
 80004da:	e708      	b.n	80002ee <__udivmoddi4+0xe6>
 80004dc:	f1a8 0802 	sub.w	r8, r8, #2
 80004e0:	443d      	add	r5, r7
 80004e2:	e72b      	b.n	800033c <__udivmoddi4+0x134>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ea:	4a0e      	ldr	r2, [pc, #56]	; (8000524 <HAL_InitTick+0x3c>)
 80004ec:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_InitTick+0x40>)
{
 80004ee:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004f0:	7818      	ldrb	r0, [r3, #0]
 80004f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004f6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004fa:	6810      	ldr	r0, [r2, #0]
 80004fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000500:	f000 fab0 	bl	8000a64 <HAL_SYSTICK_Config>
 8000504:	4604      	mov	r4, r0
 8000506:	b958      	cbnz	r0, 8000520 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000508:	2d0f      	cmp	r5, #15
 800050a:	d809      	bhi.n	8000520 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800050c:	4602      	mov	r2, r0
 800050e:	4629      	mov	r1, r5
 8000510:	f04f 30ff 	mov.w	r0, #4294967295
 8000514:	f000 fa64 	bl	80009e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <HAL_InitTick+0x44>)
 800051a:	4620      	mov	r0, r4
 800051c:	601d      	str	r5, [r3, #0]
 800051e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000520:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000522:	bd38      	pop	{r3, r4, r5, pc}
 8000524:	20000008 	.word	0x20000008
 8000528:	20000000 	.word	0x20000000
 800052c:	20000004 	.word	0x20000004

08000530 <HAL_Init>:
{
 8000530:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000532:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <HAL_Init+0x30>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800053a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000542:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800054a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 fa35 	bl	80009bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f7ff ffc8 	bl	80004e8 <HAL_InitTick>
  HAL_MspInit();
 8000558:	f001 fb8c 	bl	8001c74 <HAL_MspInit>
}
 800055c:	2000      	movs	r0, #0
 800055e:	bd08      	pop	{r3, pc}
 8000560:	40023c00 	.word	0x40023c00

08000564 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000564:	4a03      	ldr	r2, [pc, #12]	; (8000574 <HAL_IncTick+0x10>)
 8000566:	4b04      	ldr	r3, [pc, #16]	; (8000578 <HAL_IncTick+0x14>)
 8000568:	6811      	ldr	r1, [r2, #0]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	440b      	add	r3, r1
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800057c:	4b01      	ldr	r3, [pc, #4]	; (8000584 <HAL_GetTick+0x8>)
 800057e:	6818      	ldr	r0, [r3, #0]
}
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000028 	.word	0x20000028

08000588 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000588:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800058a:	4604      	mov	r4, r0
 800058c:	2800      	cmp	r0, #0
 800058e:	f000 809b 	beq.w	80006c8 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000592:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8000594:	b925      	cbnz	r5, 80005a0 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000596:	f001 fb89 	bl	8001cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800059a:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800059c:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005a2:	06db      	lsls	r3, r3, #27
 80005a4:	f100 808e 	bmi.w	80006c4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80005a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80005aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80005ae:	f023 0302 	bic.w	r3, r3, #2
 80005b2:	f043 0302 	orr.w	r3, r3, #2
 80005b6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80005b8:	4b44      	ldr	r3, [pc, #272]	; (80006cc <HAL_ADC_Init+0x144>)
 80005ba:	685a      	ldr	r2, [r3, #4]
 80005bc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80005c0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80005c2:	685a      	ldr	r2, [r3, #4]
 80005c4:	6861      	ldr	r1, [r4, #4]
 80005c6:	430a      	orrs	r2, r1
 80005c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005ca:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005cc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80005ce:	685a      	ldr	r2, [r3, #4]
 80005d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80005d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80005d6:	685a      	ldr	r2, [r3, #4]
 80005d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80005dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005de:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005e0:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80005e2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80005e6:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80005e8:	685a      	ldr	r2, [r3, #4]
 80005ea:	430a      	orrs	r2, r1
 80005ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005ee:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005f0:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80005f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80005f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80005f8:	689a      	ldr	r2, [r3, #8]
 80005fa:	430a      	orrs	r2, r1
 80005fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005fe:	4934      	ldr	r1, [pc, #208]	; (80006d0 <HAL_ADC_Init+0x148>)
 8000600:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000602:	428a      	cmp	r2, r1
 8000604:	d052      	beq.n	80006ac <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000606:	6899      	ldr	r1, [r3, #8]
 8000608:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800060c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800060e:	6899      	ldr	r1, [r3, #8]
 8000610:	430a      	orrs	r2, r1
 8000612:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000614:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000616:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000618:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800061c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800061e:	689a      	ldr	r2, [r3, #8]
 8000620:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000622:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000624:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000626:	7e21      	ldrb	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000628:	f022 0202 	bic.w	r2, r2, #2
 800062c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800062e:	689a      	ldr	r2, [r3, #8]
 8000630:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8000634:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000636:	f894 2020 	ldrb.w	r2, [r4, #32]
 800063a:	2a00      	cmp	r2, #0
 800063c:	d03e      	beq.n	80006bc <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800063e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000640:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000646:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000648:	685a      	ldr	r2, [r3, #4]
 800064a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800064e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000650:	685a      	ldr	r2, [r3, #4]
 8000652:	3901      	subs	r1, #1
 8000654:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000658:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800065a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800065c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800065e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000662:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000666:	3901      	subs	r1, #1
 8000668:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800066c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800066e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000670:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000674:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000678:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800067a:	689a      	ldr	r2, [r3, #8]
 800067c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000680:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000682:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000684:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800068a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800068c:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800068e:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000690:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000694:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000696:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8000698:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800069a:	f023 0303 	bic.w	r3, r3, #3
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80006a4:	2300      	movs	r3, #0
 80006a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 80006aa:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006ac:	689a      	ldr	r2, [r3, #8]
 80006ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80006b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006ba:	e7b2      	b.n	8000622 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80006bc:	685a      	ldr	r2, [r3, #4]
 80006be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006c2:	e7c9      	b.n	8000658 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80006c4:	2001      	movs	r0, #1
 80006c6:	e7ed      	b.n	80006a4 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80006c8:	2001      	movs	r0, #1
}
 80006ca:	bd38      	pop	{r3, r4, r5, pc}
 80006cc:	40012300 	.word	0x40012300
 80006d0:	0f000001 	.word	0x0f000001

080006d4 <HAL_ADC_Start>:
{
 80006d4:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80006d6:	2300      	movs	r3, #0
 80006d8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80006da:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d04e      	beq.n	8000780 <HAL_ADC_Start+0xac>
 80006e2:	2301      	movs	r3, #1
 80006e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006e8:	6803      	ldr	r3, [r0, #0]
 80006ea:	689a      	ldr	r2, [r3, #8]
 80006ec:	07d1      	lsls	r1, r2, #31
 80006ee:	d505      	bpl.n	80006fc <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006f0:	689a      	ldr	r2, [r3, #8]
 80006f2:	07d2      	lsls	r2, r2, #31
 80006f4:	d414      	bmi.n	8000720 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 80006f6:	2000      	movs	r0, #0
}
 80006f8:	b002      	add	sp, #8
 80006fa:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80006fc:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006fe:	4921      	ldr	r1, [pc, #132]	; (8000784 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 8000700:	f042 0201 	orr.w	r2, r2, #1
 8000704:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000706:	4a20      	ldr	r2, [pc, #128]	; (8000788 <HAL_ADC_Start+0xb4>)
 8000708:	6812      	ldr	r2, [r2, #0]
 800070a:	fbb2 f2f1 	udiv	r2, r2, r1
 800070e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 8000712:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 8000714:	9a01      	ldr	r2, [sp, #4]
 8000716:	2a00      	cmp	r2, #0
 8000718:	d0ea      	beq.n	80006f0 <HAL_ADC_Start+0x1c>
      counter--;
 800071a:	9a01      	ldr	r2, [sp, #4]
 800071c:	3a01      	subs	r2, #1
 800071e:	e7f8      	b.n	8000712 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 8000720:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000722:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000726:	f022 0201 	bic.w	r2, r2, #1
 800072a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800072e:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000730:	685a      	ldr	r2, [r3, #4]
 8000732:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000734:	bf41      	itttt	mi
 8000736:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 8000738:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 800073c:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000740:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000742:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000748:	bf1c      	itt	ne
 800074a:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 800074c:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000750:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000752:	2200      	movs	r2, #0
 8000754:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000758:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800075c:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800075e:	4a0b      	ldr	r2, [pc, #44]	; (800078c <HAL_ADC_Start+0xb8>)
 8000760:	6852      	ldr	r2, [r2, #4]
 8000762:	06d2      	lsls	r2, r2, #27
 8000764:	d108      	bne.n	8000778 <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000766:	6898      	ldr	r0, [r3, #8]
 8000768:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800076c:	d1c3      	bne.n	80006f6 <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800076e:	689a      	ldr	r2, [r3, #8]
 8000770:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	e7bf      	b.n	80006f8 <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000778:	4a05      	ldr	r2, [pc, #20]	; (8000790 <HAL_ADC_Start+0xbc>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d1bb      	bne.n	80006f6 <HAL_ADC_Start+0x22>
 800077e:	e7f2      	b.n	8000766 <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8000780:	2002      	movs	r0, #2
 8000782:	e7b9      	b.n	80006f8 <HAL_ADC_Start+0x24>
 8000784:	000f4240 	.word	0x000f4240
 8000788:	20000008 	.word	0x20000008
 800078c:	40012300 	.word	0x40012300
 8000790:	40012000 	.word	0x40012000

08000794 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000794:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000798:	2b01      	cmp	r3, #1
 800079a:	d017      	beq.n	80007cc <HAL_ADC_Stop+0x38>
 800079c:	2301      	movs	r3, #1
 800079e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 80007a2:	6803      	ldr	r3, [r0, #0]
 80007a4:	689a      	ldr	r2, [r3, #8]
 80007a6:	f022 0201 	bic.w	r2, r2, #1
 80007aa:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80007ac:	689b      	ldr	r3, [r3, #8]
 80007ae:	07db      	lsls	r3, r3, #31
 80007b0:	d407      	bmi.n	80007c2 <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 80007b2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80007b4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80007b8:	f023 0301 	bic.w	r3, r3, #1
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80007c2:	2300      	movs	r3, #0
 80007c4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80007c8:	4618      	mov	r0, r3
 80007ca:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80007cc:	2002      	movs	r0, #2
}
 80007ce:	4770      	bx	lr

080007d0 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007d0:	6803      	ldr	r3, [r0, #0]
 80007d2:	689a      	ldr	r2, [r3, #8]
{
 80007d4:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007d6:	0556      	lsls	r6, r2, #21
{
 80007d8:	4604      	mov	r4, r0
 80007da:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007dc:	d50b      	bpl.n	80007f6 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80007de:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80007e0:	05d8      	lsls	r0, r3, #23
 80007e2:	d508      	bpl.n	80007f6 <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007e6:	f043 0320 	orr.w	r3, r3, #32
 80007ea:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80007ec:	2300      	movs	r3, #0
 80007ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80007f2:	2001      	movs	r0, #1
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80007f6:	f7ff fec1 	bl	800057c <HAL_GetTick>
 80007fa:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80007fc:	6823      	ldr	r3, [r4, #0]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	0792      	lsls	r2, r2, #30
 8000802:	d50c      	bpl.n	800081e <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000804:	f06f 0212 	mvn.w	r2, #18
 8000808:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800080a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800080c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000810:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000812:	689a      	ldr	r2, [r3, #8]
 8000814:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8000818:	d013      	beq.n	8000842 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 800081a:	2000      	movs	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 800081e:	1c69      	adds	r1, r5, #1
 8000820:	d0ed      	beq.n	80007fe <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000822:	b945      	cbnz	r5, 8000836 <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000824:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000826:	f043 0304 	orr.w	r3, r3, #4
 800082a:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 800082c:	2300      	movs	r3, #0
 800082e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000832:	2003      	movs	r0, #3
 8000834:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000836:	f7ff fea1 	bl	800057c <HAL_GetTick>
 800083a:	1b80      	subs	r0, r0, r6
 800083c:	4285      	cmp	r5, r0
 800083e:	d2dd      	bcs.n	80007fc <HAL_ADC_PollForConversion+0x2c>
 8000840:	e7f0      	b.n	8000824 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000842:	7e22      	ldrb	r2, [r4, #24]
 8000844:	2a00      	cmp	r2, #0
 8000846:	d1e8      	bne.n	800081a <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800084a:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800084e:	d002      	beq.n	8000856 <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000850:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000852:	055b      	lsls	r3, r3, #21
 8000854:	d4e1      	bmi.n	800081a <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000856:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800085c:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800085e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000860:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000864:	d1d9      	bne.n	800081a <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000866:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6423      	str	r3, [r4, #64]	; 0x40
}
 800086e:	bd70      	pop	{r4, r5, r6, pc}

08000870 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000870:	6803      	ldr	r3, [r0, #0]
 8000872:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000874:	4770      	bx	lr
	...

08000878 <HAL_ADC_ConfigChannel>:
{
 8000878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800087a:	2300      	movs	r3, #0
 800087c:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 800087e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000882:	2b01      	cmp	r3, #1
 8000884:	d06e      	beq.n	8000964 <HAL_ADC_ConfigChannel+0xec>
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000886:	680d      	ldr	r5, [r1, #0]
 8000888:	6804      	ldr	r4, [r0, #0]
 800088a:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 800088c:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 800088e:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000890:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000894:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000896:	d92a      	bls.n	80008ee <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000898:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800089c:	68e7      	ldr	r7, [r4, #12]
 800089e:	3b1e      	subs	r3, #30
 80008a0:	f04f 0e07 	mov.w	lr, #7
 80008a4:	fa0e fe03 	lsl.w	lr, lr, r3
 80008a8:	ea27 070e 	bic.w	r7, r7, lr
 80008ac:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80008ae:	68e7      	ldr	r7, [r4, #12]
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	433b      	orrs	r3, r7
 80008b6:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 80008b8:	684a      	ldr	r2, [r1, #4]
 80008ba:	2a06      	cmp	r2, #6
 80008bc:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80008c0:	d825      	bhi.n	800090e <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80008c2:	4413      	add	r3, r2
 80008c4:	6b67      	ldr	r7, [r4, #52]	; 0x34
 80008c6:	1f59      	subs	r1, r3, #5
 80008c8:	231f      	movs	r3, #31
 80008ca:	408b      	lsls	r3, r1
 80008cc:	ea27 0303 	bic.w	r3, r7, r3
 80008d0:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80008d2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80008d4:	fa06 f101 	lsl.w	r1, r6, r1
 80008d8:	4311      	orrs	r1, r2
 80008da:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80008dc:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <HAL_ADC_ConfigChannel+0x130>)
 80008de:	429c      	cmp	r4, r3
 80008e0:	d034      	beq.n	800094c <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 80008e2:	2300      	movs	r3, #0
 80008e4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80008e8:	4618      	mov	r0, r3
}
 80008ea:	b003      	add	sp, #12
 80008ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80008ee:	6927      	ldr	r7, [r4, #16]
 80008f0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80008f4:	f04f 0e07 	mov.w	lr, #7
 80008f8:	fa0e fe03 	lsl.w	lr, lr, r3
 80008fc:	ea27 070e 	bic.w	r7, r7, lr
 8000900:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000902:	6927      	ldr	r7, [r4, #16]
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	433b      	orrs	r3, r7
 800090a:	6123      	str	r3, [r4, #16]
 800090c:	e7d4      	b.n	80008b8 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 800090e:	2a0c      	cmp	r2, #12
 8000910:	d80e      	bhi.n	8000930 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000912:	4413      	add	r3, r2
 8000914:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000916:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 800091a:	231f      	movs	r3, #31
 800091c:	4093      	lsls	r3, r2
 800091e:	ea21 0303 	bic.w	r3, r1, r3
 8000922:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000924:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000926:	fa06 f202 	lsl.w	r2, r6, r2
 800092a:	431a      	orrs	r2, r3
 800092c:	6322      	str	r2, [r4, #48]	; 0x30
 800092e:	e7d5      	b.n	80008dc <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000930:	4413      	add	r3, r2
 8000932:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000934:	3b41      	subs	r3, #65	; 0x41
 8000936:	221f      	movs	r2, #31
 8000938:	409a      	lsls	r2, r3
 800093a:	ea21 0202 	bic.w	r2, r1, r2
 800093e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000940:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000942:	fa06 f103 	lsl.w	r1, r6, r3
 8000946:	4311      	orrs	r1, r2
 8000948:	62e1      	str	r1, [r4, #44]	; 0x2c
 800094a:	e7c7      	b.n	80008dc <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800094c:	2d12      	cmp	r5, #18
 800094e:	d10b      	bne.n	8000968 <HAL_ADC_ConfigChannel+0xf0>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <HAL_ADC_ConfigChannel+0x134>)
 8000952:	685a      	ldr	r2, [r3, #4]
 8000954:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000958:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800095a:	685a      	ldr	r2, [r3, #4]
 800095c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	e7be      	b.n	80008e2 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8000964:	2002      	movs	r0, #2
 8000966:	e7c0      	b.n	80008ea <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <HAL_ADC_ConfigChannel+0x138>)
 800096a:	429d      	cmp	r5, r3
 800096c:	d001      	beq.n	8000972 <HAL_ADC_ConfigChannel+0xfa>
 800096e:	2d11      	cmp	r5, #17
 8000970:	d1b7      	bne.n	80008e2 <HAL_ADC_ConfigChannel+0x6a>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_ADC_ConfigChannel+0x134>)
 8000974:	685a      	ldr	r2, [r3, #4]
 8000976:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 800097a:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800097c:	685a      	ldr	r2, [r3, #4]
 800097e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000982:	605a      	str	r2, [r3, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000984:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <HAL_ADC_ConfigChannel+0x138>)
 8000986:	429d      	cmp	r5, r3
 8000988:	d1ab      	bne.n	80008e2 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <HAL_ADC_ConfigChannel+0x13c>)
 800098c:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <HAL_ADC_ConfigChannel+0x140>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	fbb3 f2f2 	udiv	r2, r3, r2
 8000994:	230a      	movs	r3, #10
 8000996:	4353      	muls	r3, r2
        counter--;
 8000998:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 800099a:	9b01      	ldr	r3, [sp, #4]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d0a0      	beq.n	80008e2 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 80009a0:	9b01      	ldr	r3, [sp, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	e7f8      	b.n	8000998 <HAL_ADC_ConfigChannel+0x120>
 80009a6:	bf00      	nop
 80009a8:	40012000 	.word	0x40012000
 80009ac:	40012300 	.word	0x40012300
 80009b0:	10000012 	.word	0x10000012
 80009b4:	20000008 	.word	0x20000008
 80009b8:	000f4240 	.word	0x000f4240

080009bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009be:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009c4:	041b      	lsls	r3, r3, #16
 80009c6:	0c1b      	lsrs	r3, r3, #16
 80009c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009cc:	0200      	lsls	r0, r0, #8
 80009ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80009d6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80009d8:	60d3      	str	r3, [r2, #12]
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009e2:	b530      	push	{r4, r5, lr}
 80009e4:	68dc      	ldr	r4, [r3, #12]
 80009e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f0:	2b04      	cmp	r3, #4
 80009f2:	bf28      	it	cs
 80009f4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f8:	f04f 0501 	mov.w	r5, #1
 80009fc:	fa05 f303 	lsl.w	r3, r5, r3
 8000a00:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a04:	bf8c      	ite	hi
 8000a06:	3c03      	subhi	r4, #3
 8000a08:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0a:	4019      	ands	r1, r3
 8000a0c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a0e:	fa05 f404 	lsl.w	r4, r5, r4
 8000a12:	3c01      	subs	r4, #1
 8000a14:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000a16:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a18:	ea42 0201 	orr.w	r2, r2, r1
 8000a1c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	bfad      	iteet	ge
 8000a22:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	f000 000f 	andlt.w	r0, r0, #15
 8000a2a:	4b06      	ldrlt	r3, [pc, #24]	; (8000a44 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a30:	bfb5      	itete	lt
 8000a32:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a36:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a38:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000a3c:	bd30      	pop	{r4, r5, pc}
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00
 8000a44:	e000ed14 	.word	0xe000ed14

08000a48 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a48:	2800      	cmp	r0, #0
 8000a4a:	db08      	blt.n	8000a5e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4c:	0942      	lsrs	r2, r0, #5
 8000a4e:	2301      	movs	r3, #1
 8000a50:	f000 001f 	and.w	r0, r0, #31
 8000a54:	fa03 f000 	lsl.w	r0, r3, r0
 8000a58:	4b01      	ldr	r3, [pc, #4]	; (8000a60 <HAL_NVIC_EnableIRQ+0x18>)
 8000a5a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000a5e:	4770      	bx	lr
 8000a60:	e000e100 	.word	0xe000e100

08000a64 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	3801      	subs	r0, #1
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a6a:	d20a      	bcs.n	8000a82 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	4a07      	ldr	r2, [pc, #28]	; (8000a8c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a70:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a72:	21f0      	movs	r1, #240	; 0xf0
 8000a74:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a78:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a7c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a82:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000e010 	.word	0xe000e010
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000a90:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000a94:	2b02      	cmp	r3, #2
 8000a96:	d003      	beq.n	8000aa0 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a98:	2380      	movs	r3, #128	; 0x80
 8000a9a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000aa0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8000aa2:	2305      	movs	r3, #5
 8000aa4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000aa8:	6813      	ldr	r3, [r2, #0]
 8000aaa:	f023 0301 	bic.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8000ab0:	2000      	movs	r0, #0
}
 8000ab2:	4770      	bx	lr

08000ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ab8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aba:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000abc:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8000c4c <HAL_GPIO_Init+0x198>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ac0:	4a60      	ldr	r2, [pc, #384]	; (8000c44 <HAL_GPIO_Init+0x190>)
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac2:	9301      	str	r3, [sp, #4]
    ioposition = 0x01U << position;
 8000ac4:	f04f 0901 	mov.w	r9, #1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ac8:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aca:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 8000acc:	fa09 f403 	lsl.w	r4, r9, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ad0:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000ad2:	42ac      	cmp	r4, r5
 8000ad4:	f040 80a6 	bne.w	8000c24 <HAL_GPIO_Init+0x170>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ad8:	684c      	ldr	r4, [r1, #4]
 8000ada:	f024 0c10 	bic.w	ip, r4, #16
 8000ade:	f10c 36ff 	add.w	r6, ip, #4294967295
 8000ae2:	2e01      	cmp	r6, #1
 8000ae4:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ae8:	d812      	bhi.n	8000b10 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 8000aea:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000aec:	2603      	movs	r6, #3
 8000aee:	fa06 f60e 	lsl.w	r6, r6, lr
 8000af2:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000af6:	68ce      	ldr	r6, [r1, #12]
 8000af8:	fa06 f60e 	lsl.w	r6, r6, lr
 8000afc:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000afe:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b00:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b02:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b06:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b0a:	409e      	lsls	r6, r3
 8000b0c:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000b0e:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b10:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000b12:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b14:	fa06 f60e 	lsl.w	r6, r6, lr
 8000b18:	43f6      	mvns	r6, r6
 8000b1a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b1e:	688f      	ldr	r7, [r1, #8]
 8000b20:	fa07 f70e 	lsl.w	r7, r7, lr
 8000b24:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b28:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 8000b2c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b2e:	d116      	bne.n	8000b5e <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000b30:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000b34:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b38:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000b3c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b40:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000b44:	f04f 0c0f 	mov.w	ip, #15
 8000b48:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b4c:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b50:	690f      	ldr	r7, [r1, #16]
 8000b52:	fa07 f70b 	lsl.w	r7, r7, fp
 8000b56:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000b5a:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000b5e:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b60:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b62:	f004 0703 	and.w	r7, r4, #3
 8000b66:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000b6a:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000b6e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b70:	00e6      	lsls	r6, r4, #3
 8000b72:	d557      	bpl.n	8000c24 <HAL_GPIO_Init+0x170>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b74:	f04f 0b00 	mov.w	fp, #0
 8000b78:	f8cd b00c 	str.w	fp, [sp, #12]
 8000b7c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b80:	4e31      	ldr	r6, [pc, #196]	; (8000c48 <HAL_GPIO_Init+0x194>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b82:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000b86:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000b8a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000b8e:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000b92:	9703      	str	r7, [sp, #12]
 8000b94:	9f03      	ldr	r7, [sp, #12]
 8000b96:	f023 0703 	bic.w	r7, r3, #3
 8000b9a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000b9e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ba2:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ba6:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000baa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000bae:	f04f 0e0f 	mov.w	lr, #15
 8000bb2:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bb6:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000bb8:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000bbc:	d039      	beq.n	8000c32 <HAL_GPIO_Init+0x17e>
 8000bbe:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bc2:	42b0      	cmp	r0, r6
 8000bc4:	d037      	beq.n	8000c36 <HAL_GPIO_Init+0x182>
 8000bc6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bca:	42b0      	cmp	r0, r6
 8000bcc:	d035      	beq.n	8000c3a <HAL_GPIO_Init+0x186>
 8000bce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bd2:	42b0      	cmp	r0, r6
 8000bd4:	d033      	beq.n	8000c3e <HAL_GPIO_Init+0x18a>
 8000bd6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bda:	42b0      	cmp	r0, r6
 8000bdc:	bf14      	ite	ne
 8000bde:	2607      	movne	r6, #7
 8000be0:	2604      	moveq	r6, #4
 8000be2:	fa06 f60c 	lsl.w	r6, r6, ip
 8000be6:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000bea:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000bec:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000bee:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bf0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000bf4:	bf0c      	ite	eq
 8000bf6:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000bf8:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000bfa:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000bfc:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bfe:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000c02:	bf0c      	ite	eq
 8000c04:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c06:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000c08:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c0a:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c0c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000c10:	bf0c      	ite	eq
 8000c12:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c14:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000c16:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000c18:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c1a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000c1c:	bf54      	ite	pl
 8000c1e:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000c20:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000c22:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c24:	3301      	adds	r3, #1
 8000c26:	2b10      	cmp	r3, #16
 8000c28:	f47f af4f 	bne.w	8000aca <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000c2c:	b005      	add	sp, #20
 8000c2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c32:	465e      	mov	r6, fp
 8000c34:	e7d5      	b.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000c36:	2601      	movs	r6, #1
 8000c38:	e7d3      	b.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000c3a:	2602      	movs	r6, #2
 8000c3c:	e7d1      	b.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000c3e:	2603      	movs	r6, #3
 8000c40:	e7cf      	b.n	8000be2 <HAL_GPIO_Init+0x12e>
 8000c42:	bf00      	nop
 8000c44:	40013c00 	.word	0x40013c00
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40023800 	.word	0x40023800

08000c50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c50:	b10a      	cbz	r2, 8000c56 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000c52:	6181      	str	r1, [r0, #24]
 8000c54:	4770      	bx	lr
 8000c56:	0409      	lsls	r1, r1, #16
 8000c58:	e7fb      	b.n	8000c52 <HAL_GPIO_WritePin+0x2>
	...

08000c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c60:	4604      	mov	r4, r0
 8000c62:	b908      	cbnz	r0, 8000c68 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000c64:	2001      	movs	r0, #1
 8000c66:	e03f      	b.n	8000ce8 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c68:	6803      	ldr	r3, [r0, #0]
 8000c6a:	07dd      	lsls	r5, r3, #31
 8000c6c:	d410      	bmi.n	8000c90 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c6e:	6823      	ldr	r3, [r4, #0]
 8000c70:	0798      	lsls	r0, r3, #30
 8000c72:	d45a      	bmi.n	8000d2a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c74:	6823      	ldr	r3, [r4, #0]
 8000c76:	071a      	lsls	r2, r3, #28
 8000c78:	f100 809c 	bmi.w	8000db4 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c7c:	6823      	ldr	r3, [r4, #0]
 8000c7e:	075b      	lsls	r3, r3, #29
 8000c80:	f100 80ba 	bmi.w	8000df8 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c84:	69a0      	ldr	r0, [r4, #24]
 8000c86:	2800      	cmp	r0, #0
 8000c88:	f040 811b 	bne.w	8000ec2 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	e02b      	b.n	8000ce8 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c90:	4ba4      	ldr	r3, [pc, #656]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	f002 020c 	and.w	r2, r2, #12
 8000c98:	2a04      	cmp	r2, #4
 8000c9a:	d007      	beq.n	8000cac <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ca2:	2a08      	cmp	r2, #8
 8000ca4:	d10a      	bne.n	8000cbc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	0259      	lsls	r1, r3, #9
 8000caa:	d507      	bpl.n	8000cbc <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cac:	4b9d      	ldr	r3, [pc, #628]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	039a      	lsls	r2, r3, #14
 8000cb2:	d5dc      	bpl.n	8000c6e <HAL_RCC_OscConfig+0x12>
 8000cb4:	6863      	ldr	r3, [r4, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1d9      	bne.n	8000c6e <HAL_RCC_OscConfig+0x12>
 8000cba:	e7d3      	b.n	8000c64 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cbc:	6863      	ldr	r3, [r4, #4]
 8000cbe:	4d99      	ldr	r5, [pc, #612]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
 8000cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc4:	d113      	bne.n	8000cee <HAL_RCC_OscConfig+0x92>
 8000cc6:	682b      	ldr	r3, [r5, #0]
 8000cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ccc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cce:	f7ff fc55 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd2:	4d94      	ldr	r5, [pc, #592]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000cd4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd6:	682b      	ldr	r3, [r5, #0]
 8000cd8:	039b      	lsls	r3, r3, #14
 8000cda:	d4c8      	bmi.n	8000c6e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cdc:	f7ff fc4e 	bl	800057c <HAL_GetTick>
 8000ce0:	1b80      	subs	r0, r0, r6
 8000ce2:	2864      	cmp	r0, #100	; 0x64
 8000ce4:	d9f7      	bls.n	8000cd6 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000ce6:	2003      	movs	r0, #3
}
 8000ce8:	b002      	add	sp, #8
 8000cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cf2:	d104      	bne.n	8000cfe <HAL_RCC_OscConfig+0xa2>
 8000cf4:	682b      	ldr	r3, [r5, #0]
 8000cf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cfa:	602b      	str	r3, [r5, #0]
 8000cfc:	e7e3      	b.n	8000cc6 <HAL_RCC_OscConfig+0x6a>
 8000cfe:	682a      	ldr	r2, [r5, #0]
 8000d00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000d04:	602a      	str	r2, [r5, #0]
 8000d06:	682a      	ldr	r2, [r5, #0]
 8000d08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000d0c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d1dd      	bne.n	8000cce <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000d12:	f7ff fc33 	bl	800057c <HAL_GetTick>
 8000d16:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d18:	682b      	ldr	r3, [r5, #0]
 8000d1a:	039f      	lsls	r7, r3, #14
 8000d1c:	d5a7      	bpl.n	8000c6e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d1e:	f7ff fc2d 	bl	800057c <HAL_GetTick>
 8000d22:	1b80      	subs	r0, r0, r6
 8000d24:	2864      	cmp	r0, #100	; 0x64
 8000d26:	d9f7      	bls.n	8000d18 <HAL_RCC_OscConfig+0xbc>
 8000d28:	e7dd      	b.n	8000ce6 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d2a:	4b7e      	ldr	r3, [pc, #504]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	f012 0f0c 	tst.w	r2, #12
 8000d32:	d007      	beq.n	8000d44 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d34:	689a      	ldr	r2, [r3, #8]
 8000d36:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d3a:	2a08      	cmp	r2, #8
 8000d3c:	d111      	bne.n	8000d62 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	025e      	lsls	r6, r3, #9
 8000d42:	d40e      	bmi.n	8000d62 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d44:	4b77      	ldr	r3, [pc, #476]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	0795      	lsls	r5, r2, #30
 8000d4a:	d502      	bpl.n	8000d52 <HAL_RCC_OscConfig+0xf6>
 8000d4c:	68e2      	ldr	r2, [r4, #12]
 8000d4e:	2a01      	cmp	r2, #1
 8000d50:	d188      	bne.n	8000c64 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	6921      	ldr	r1, [r4, #16]
 8000d56:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000d5a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000d5e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d60:	e788      	b.n	8000c74 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d62:	68e2      	ldr	r2, [r4, #12]
 8000d64:	4b70      	ldr	r3, [pc, #448]	; (8000f28 <HAL_RCC_OscConfig+0x2cc>)
 8000d66:	b1b2      	cbz	r2, 8000d96 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fc06 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d70:	4d6c      	ldr	r5, [pc, #432]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000d72:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d74:	682b      	ldr	r3, [r5, #0]
 8000d76:	0798      	lsls	r0, r3, #30
 8000d78:	d507      	bpl.n	8000d8a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7a:	682b      	ldr	r3, [r5, #0]
 8000d7c:	6922      	ldr	r2, [r4, #16]
 8000d7e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d82:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d86:	602b      	str	r3, [r5, #0]
 8000d88:	e774      	b.n	8000c74 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d8a:	f7ff fbf7 	bl	800057c <HAL_GetTick>
 8000d8e:	1b80      	subs	r0, r0, r6
 8000d90:	2802      	cmp	r0, #2
 8000d92:	d9ef      	bls.n	8000d74 <HAL_RCC_OscConfig+0x118>
 8000d94:	e7a7      	b.n	8000ce6 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000d96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d98:	f7ff fbf0 	bl	800057c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9c:	4d61      	ldr	r5, [pc, #388]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000d9e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da0:	682b      	ldr	r3, [r5, #0]
 8000da2:	0799      	lsls	r1, r3, #30
 8000da4:	f57f af66 	bpl.w	8000c74 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000da8:	f7ff fbe8 	bl	800057c <HAL_GetTick>
 8000dac:	1b80      	subs	r0, r0, r6
 8000dae:	2802      	cmp	r0, #2
 8000db0:	d9f6      	bls.n	8000da0 <HAL_RCC_OscConfig+0x144>
 8000db2:	e798      	b.n	8000ce6 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000db4:	6962      	ldr	r2, [r4, #20]
 8000db6:	4b5d      	ldr	r3, [pc, #372]	; (8000f2c <HAL_RCC_OscConfig+0x2d0>)
 8000db8:	b17a      	cbz	r2, 8000dda <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000dbe:	f7ff fbdd 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc2:	4d58      	ldr	r5, [pc, #352]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000dc4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000dc8:	079f      	lsls	r7, r3, #30
 8000dca:	f53f af57 	bmi.w	8000c7c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dce:	f7ff fbd5 	bl	800057c <HAL_GetTick>
 8000dd2:	1b80      	subs	r0, r0, r6
 8000dd4:	2802      	cmp	r0, #2
 8000dd6:	d9f6      	bls.n	8000dc6 <HAL_RCC_OscConfig+0x16a>
 8000dd8:	e785      	b.n	8000ce6 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000dda:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000ddc:	f7ff fbce 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de0:	4d50      	ldr	r5, [pc, #320]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000de2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000de6:	0798      	lsls	r0, r3, #30
 8000de8:	f57f af48 	bpl.w	8000c7c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dec:	f7ff fbc6 	bl	800057c <HAL_GetTick>
 8000df0:	1b80      	subs	r0, r0, r6
 8000df2:	2802      	cmp	r0, #2
 8000df4:	d9f6      	bls.n	8000de4 <HAL_RCC_OscConfig+0x188>
 8000df6:	e776      	b.n	8000ce6 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000df8:	4b4a      	ldr	r3, [pc, #296]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
 8000dfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dfc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000e00:	d128      	bne.n	8000e54 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e02:	9201      	str	r2, [sp, #4]
 8000e04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e0a:	641a      	str	r2, [r3, #64]	; 0x40
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e16:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e18:	4d45      	ldr	r5, [pc, #276]	; (8000f30 <HAL_RCC_OscConfig+0x2d4>)
 8000e1a:	682b      	ldr	r3, [r5, #0]
 8000e1c:	05d9      	lsls	r1, r3, #23
 8000e1e:	d51b      	bpl.n	8000e58 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e20:	68a3      	ldr	r3, [r4, #8]
 8000e22:	4d40      	ldr	r5, [pc, #256]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d127      	bne.n	8000e78 <HAL_RCC_OscConfig+0x21c>
 8000e28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000e30:	f7ff fba4 	bl	800057c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e34:	4d3b      	ldr	r5, [pc, #236]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000e36:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e38:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e3e:	079b      	lsls	r3, r3, #30
 8000e40:	d539      	bpl.n	8000eb6 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000e42:	2e00      	cmp	r6, #0
 8000e44:	f43f af1e 	beq.w	8000c84 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e48:	4a36      	ldr	r2, [pc, #216]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
 8000e4a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e50:	6413      	str	r3, [r2, #64]	; 0x40
 8000e52:	e717      	b.n	8000c84 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000e54:	2600      	movs	r6, #0
 8000e56:	e7df      	b.n	8000e18 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e58:	682b      	ldr	r3, [r5, #0]
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000e60:	f7ff fb8c 	bl	800057c <HAL_GetTick>
 8000e64:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e66:	682b      	ldr	r3, [r5, #0]
 8000e68:	05da      	lsls	r2, r3, #23
 8000e6a:	d4d9      	bmi.n	8000e20 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e6c:	f7ff fb86 	bl	800057c <HAL_GetTick>
 8000e70:	1bc0      	subs	r0, r0, r7
 8000e72:	2802      	cmp	r0, #2
 8000e74:	d9f7      	bls.n	8000e66 <HAL_RCC_OscConfig+0x20a>
 8000e76:	e736      	b.n	8000ce6 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e78:	2b05      	cmp	r3, #5
 8000e7a:	d104      	bne.n	8000e86 <HAL_RCC_OscConfig+0x22a>
 8000e7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e7e:	f043 0304 	orr.w	r3, r3, #4
 8000e82:	672b      	str	r3, [r5, #112]	; 0x70
 8000e84:	e7d0      	b.n	8000e28 <HAL_RCC_OscConfig+0x1cc>
 8000e86:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e88:	f022 0201 	bic.w	r2, r2, #1
 8000e8c:	672a      	str	r2, [r5, #112]	; 0x70
 8000e8e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e90:	f022 0204 	bic.w	r2, r2, #4
 8000e94:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1ca      	bne.n	8000e30 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fb6f 	bl	800057c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e9e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000ea2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ea4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ea6:	0798      	lsls	r0, r3, #30
 8000ea8:	d5cb      	bpl.n	8000e42 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fb67 	bl	800057c <HAL_GetTick>
 8000eae:	1bc0      	subs	r0, r0, r7
 8000eb0:	4540      	cmp	r0, r8
 8000eb2:	d9f7      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x248>
 8000eb4:	e717      	b.n	8000ce6 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eb6:	f7ff fb61 	bl	800057c <HAL_GetTick>
 8000eba:	1bc0      	subs	r0, r0, r7
 8000ebc:	4540      	cmp	r0, r8
 8000ebe:	d9bd      	bls.n	8000e3c <HAL_RCC_OscConfig+0x1e0>
 8000ec0:	e711      	b.n	8000ce6 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ec2:	4d18      	ldr	r5, [pc, #96]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
 8000ec4:	68ab      	ldr	r3, [r5, #8]
 8000ec6:	f003 030c 	and.w	r3, r3, #12
 8000eca:	2b08      	cmp	r3, #8
 8000ecc:	d047      	beq.n	8000f5e <HAL_RCC_OscConfig+0x302>
 8000ece:	4e19      	ldr	r6, [pc, #100]	; (8000f34 <HAL_RCC_OscConfig+0x2d8>)
 8000ed0:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ed2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000ed4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ed6:	d135      	bne.n	8000f44 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000ed8:	f7ff fb50 	bl	800057c <HAL_GetTick>
 8000edc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ede:	682b      	ldr	r3, [r5, #0]
 8000ee0:	0199      	lsls	r1, r3, #6
 8000ee2:	d429      	bmi.n	8000f38 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ee4:	6a22      	ldr	r2, [r4, #32]
 8000ee6:	69e3      	ldr	r3, [r4, #28]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000eec:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ef0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ef2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ef6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ef8:	4c0a      	ldr	r4, [pc, #40]	; (8000f24 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000efa:	0852      	lsrs	r2, r2, #1
 8000efc:	3a01      	subs	r2, #1
 8000efe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f02:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f04:	2301      	movs	r3, #1
 8000f06:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f08:	f7ff fb38 	bl	800057c <HAL_GetTick>
 8000f0c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	019a      	lsls	r2, r3, #6
 8000f12:	f53f aebb 	bmi.w	8000c8c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f16:	f7ff fb31 	bl	800057c <HAL_GetTick>
 8000f1a:	1b40      	subs	r0, r0, r5
 8000f1c:	2802      	cmp	r0, #2
 8000f1e:	d9f6      	bls.n	8000f0e <HAL_RCC_OscConfig+0x2b2>
 8000f20:	e6e1      	b.n	8000ce6 <HAL_RCC_OscConfig+0x8a>
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	42470000 	.word	0x42470000
 8000f2c:	42470e80 	.word	0x42470e80
 8000f30:	40007000 	.word	0x40007000
 8000f34:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f38:	f7ff fb20 	bl	800057c <HAL_GetTick>
 8000f3c:	1bc0      	subs	r0, r0, r7
 8000f3e:	2802      	cmp	r0, #2
 8000f40:	d9cd      	bls.n	8000ede <HAL_RCC_OscConfig+0x282>
 8000f42:	e6d0      	b.n	8000ce6 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000f44:	f7ff fb1a 	bl	800057c <HAL_GetTick>
 8000f48:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f4a:	682b      	ldr	r3, [r5, #0]
 8000f4c:	019b      	lsls	r3, r3, #6
 8000f4e:	f57f ae9d 	bpl.w	8000c8c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f52:	f7ff fb13 	bl	800057c <HAL_GetTick>
 8000f56:	1b00      	subs	r0, r0, r4
 8000f58:	2802      	cmp	r0, #2
 8000f5a:	d9f6      	bls.n	8000f4a <HAL_RCC_OscConfig+0x2ee>
 8000f5c:	e6c3      	b.n	8000ce6 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000f5e:	2801      	cmp	r0, #1
 8000f60:	f43f aec2 	beq.w	8000ce8 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8000f64:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f66:	69e3      	ldr	r3, [r4, #28]
 8000f68:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	f47f ae79 	bne.w	8000c64 <HAL_RCC_OscConfig+0x8>
 8000f72:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f74:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	f47f ae73 	bne.w	8000c64 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000f7e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000f84:	4003      	ands	r3, r0
 8000f86:	4293      	cmp	r3, r2
 8000f88:	f47f ae6c 	bne.w	8000c64 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f8c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f8e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000f92:	4293      	cmp	r3, r2
 8000f94:	f47f ae66 	bne.w	8000c64 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000f98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000f9a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000f9e:	1ac0      	subs	r0, r0, r3
 8000fa0:	bf18      	it	ne
 8000fa2:	2001      	movne	r0, #1
 8000fa4:	e6a0      	b.n	8000ce8 <HAL_RCC_OscConfig+0x8c>
 8000fa6:	bf00      	nop

08000fa8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fa8:	4913      	ldr	r1, [pc, #76]	; (8000ff8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000faa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fac:	688b      	ldr	r3, [r1, #8]
 8000fae:	f003 030c 	and.w	r3, r3, #12
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	d003      	beq.n	8000fbe <HAL_RCC_GetSysClockFreq+0x16>
 8000fb6:	2b08      	cmp	r3, #8
 8000fb8:	d003      	beq.n	8000fc2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000fba:	4810      	ldr	r0, [pc, #64]	; (8000ffc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000fbc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000fbe:	4810      	ldr	r0, [pc, #64]	; (8001000 <HAL_RCC_GetSysClockFreq+0x58>)
 8000fc0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fc2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fc4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fc6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fc8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fcc:	bf14      	ite	ne
 8000fce:	480c      	ldrne	r0, [pc, #48]	; (8001000 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fd0:	480a      	ldreq	r0, [pc, #40]	; (8000ffc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fd2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000fd6:	bf18      	it	ne
 8000fd8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000fda:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fde:	fba1 0100 	umull	r0, r1, r1, r0
 8000fe2:	f7ff f8f9 	bl	80001d8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000fe6:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <HAL_RCC_GetSysClockFreq+0x50>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000fee:	3301      	adds	r3, #1
 8000ff0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000ff2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ff6:	bd08      	pop	{r3, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	00f42400 	.word	0x00f42400
 8001000:	017d7840 	.word	0x017d7840

08001004 <HAL_RCC_ClockConfig>:
{
 8001004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001008:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800100a:	4604      	mov	r4, r0
 800100c:	b910      	cbnz	r0, 8001014 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800100e:	2001      	movs	r0, #1
 8001010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001014:	4b44      	ldr	r3, [pc, #272]	; (8001128 <HAL_RCC_ClockConfig+0x124>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	f002 020f 	and.w	r2, r2, #15
 800101c:	428a      	cmp	r2, r1
 800101e:	d329      	bcc.n	8001074 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001020:	6821      	ldr	r1, [r4, #0]
 8001022:	078f      	lsls	r7, r1, #30
 8001024:	d42e      	bmi.n	8001084 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001026:	07c8      	lsls	r0, r1, #31
 8001028:	d441      	bmi.n	80010ae <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800102a:	4b3f      	ldr	r3, [pc, #252]	; (8001128 <HAL_RCC_ClockConfig+0x124>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	f002 020f 	and.w	r2, r2, #15
 8001032:	4295      	cmp	r5, r2
 8001034:	d367      	bcc.n	8001106 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001036:	6822      	ldr	r2, [r4, #0]
 8001038:	0751      	lsls	r1, r2, #29
 800103a:	d46d      	bmi.n	8001118 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800103c:	0713      	lsls	r3, r2, #28
 800103e:	d507      	bpl.n	8001050 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001040:	4a3a      	ldr	r2, [pc, #232]	; (800112c <HAL_RCC_ClockConfig+0x128>)
 8001042:	6921      	ldr	r1, [r4, #16]
 8001044:	6893      	ldr	r3, [r2, #8]
 8001046:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800104a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800104e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001050:	f7ff ffaa 	bl	8000fa8 <HAL_RCC_GetSysClockFreq>
 8001054:	4b35      	ldr	r3, [pc, #212]	; (800112c <HAL_RCC_ClockConfig+0x128>)
 8001056:	4a36      	ldr	r2, [pc, #216]	; (8001130 <HAL_RCC_ClockConfig+0x12c>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800105e:	5cd3      	ldrb	r3, [r2, r3]
 8001060:	40d8      	lsrs	r0, r3
 8001062:	4b34      	ldr	r3, [pc, #208]	; (8001134 <HAL_RCC_ClockConfig+0x130>)
 8001064:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001066:	4b34      	ldr	r3, [pc, #208]	; (8001138 <HAL_RCC_ClockConfig+0x134>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	f7ff fa3d 	bl	80004e8 <HAL_InitTick>
  return HAL_OK;
 800106e:	2000      	movs	r0, #0
 8001070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001074:	b2ca      	uxtb	r2, r1
 8001076:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	4299      	cmp	r1, r3
 8001080:	d1c5      	bne.n	800100e <HAL_RCC_ClockConfig+0xa>
 8001082:	e7cd      	b.n	8001020 <HAL_RCC_ClockConfig+0x1c>
 8001084:	4b29      	ldr	r3, [pc, #164]	; (800112c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001086:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800108a:	bf1e      	ittt	ne
 800108c:	689a      	ldrne	r2, [r3, #8]
 800108e:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001092:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001094:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001096:	bf42      	ittt	mi
 8001098:	689a      	ldrmi	r2, [r3, #8]
 800109a:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 800109e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	68a0      	ldr	r0, [r4, #8]
 80010a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010a8:	4302      	orrs	r2, r0
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	e7bb      	b.n	8001026 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ae:	6862      	ldr	r2, [r4, #4]
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <HAL_RCC_ClockConfig+0x128>)
 80010b2:	2a01      	cmp	r2, #1
 80010b4:	d11d      	bne.n	80010f2 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010bc:	d0a7      	beq.n	800100e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010be:	4e1b      	ldr	r6, [pc, #108]	; (800112c <HAL_RCC_ClockConfig+0x128>)
 80010c0:	68b3      	ldr	r3, [r6, #8]
 80010c2:	f023 0303 	bic.w	r3, r3, #3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80010ca:	f7ff fa57 	bl	800057c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ce:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80010d2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010d4:	68b3      	ldr	r3, [r6, #8]
 80010d6:	6862      	ldr	r2, [r4, #4]
 80010d8:	f003 030c 	and.w	r3, r3, #12
 80010dc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80010e0:	d0a3      	beq.n	800102a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010e2:	f7ff fa4b 	bl	800057c <HAL_GetTick>
 80010e6:	1bc0      	subs	r0, r0, r7
 80010e8:	4540      	cmp	r0, r8
 80010ea:	d9f3      	bls.n	80010d4 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80010ec:	2003      	movs	r0, #3
}
 80010ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010f2:	1e91      	subs	r1, r2, #2
 80010f4:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010f6:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010f8:	d802      	bhi.n	8001100 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010fa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010fe:	e7dd      	b.n	80010bc <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001100:	f013 0f02 	tst.w	r3, #2
 8001104:	e7da      	b.n	80010bc <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001106:	b2ea      	uxtb	r2, r5
 8001108:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	429d      	cmp	r5, r3
 8001112:	f47f af7c 	bne.w	800100e <HAL_RCC_ClockConfig+0xa>
 8001116:	e78e      	b.n	8001036 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001118:	4904      	ldr	r1, [pc, #16]	; (800112c <HAL_RCC_ClockConfig+0x128>)
 800111a:	68e0      	ldr	r0, [r4, #12]
 800111c:	688b      	ldr	r3, [r1, #8]
 800111e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001122:	4303      	orrs	r3, r0
 8001124:	608b      	str	r3, [r1, #8]
 8001126:	e789      	b.n	800103c <HAL_RCC_ClockConfig+0x38>
 8001128:	40023c00 	.word	0x40023c00
 800112c:	40023800 	.word	0x40023800
 8001130:	08001f54 	.word	0x08001f54
 8001134:	20000008 	.word	0x20000008
 8001138:	20000004 	.word	0x20000004

0800113c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <HAL_RCC_GetPCLK1Freq+0x14>)
 800113e:	4a05      	ldr	r2, [pc, #20]	; (8001154 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001146:	5cd3      	ldrb	r3, [r2, r3]
 8001148:	4a03      	ldr	r2, [pc, #12]	; (8001158 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800114a:	6810      	ldr	r0, [r2, #0]
}
 800114c:	40d8      	lsrs	r0, r3
 800114e:	4770      	bx	lr
 8001150:	40023800 	.word	0x40023800
 8001154:	08001f64 	.word	0x08001f64
 8001158:	20000008 	.word	0x20000008

0800115c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <HAL_RCC_GetPCLK2Freq+0x14>)
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001166:	5cd3      	ldrb	r3, [r2, r3]
 8001168:	4a03      	ldr	r2, [pc, #12]	; (8001178 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800116a:	6810      	ldr	r0, [r2, #0]
}
 800116c:	40d8      	lsrs	r0, r3
 800116e:	4770      	bx	lr
 8001170:	40023800 	.word	0x40023800
 8001174:	08001f64 	.word	0x08001f64
 8001178:	20000008 	.word	0x20000008

0800117c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800117c:	6a03      	ldr	r3, [r0, #32]
 800117e:	f023 0301 	bic.w	r3, r3, #1
 8001182:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001184:	6a03      	ldr	r3, [r0, #32]
{
 8001186:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001188:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800118a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800118c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800118e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001192:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001194:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001196:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800119a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800119c:	4d0a      	ldr	r5, [pc, #40]	; (80011c8 <TIM_OC1_SetConfig+0x4c>)
 800119e:	42a8      	cmp	r0, r5
 80011a0:	d10b      	bne.n	80011ba <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80011a2:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80011a4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80011a6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80011aa:	432b      	orrs	r3, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80011ac:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80011ae:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80011b2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80011b4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80011b8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80011ba:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80011bc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80011be:	684a      	ldr	r2, [r1, #4]
 80011c0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80011c2:	6203      	str	r3, [r0, #32]
 80011c4:	bd70      	pop	{r4, r5, r6, pc}
 80011c6:	bf00      	nop
 80011c8:	40010000 	.word	0x40010000

080011cc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80011cc:	6a03      	ldr	r3, [r0, #32]
 80011ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011d2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80011d4:	6a03      	ldr	r3, [r0, #32]
{
 80011d6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80011d8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80011da:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80011dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80011de:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80011e2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80011e4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80011e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80011ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80011ee:	4d0b      	ldr	r5, [pc, #44]	; (800121c <TIM_OC3_SetConfig+0x50>)
 80011f0:	42a8      	cmp	r0, r5
 80011f2:	d10d      	bne.n	8001210 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80011f4:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80011f6:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 80011f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80011fc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001200:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001202:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001206:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001208:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800120c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001210:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001212:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001214:	684a      	ldr	r2, [r1, #4]
 8001216:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001218:	6203      	str	r3, [r0, #32]
 800121a:	bd70      	pop	{r4, r5, r6, pc}
 800121c:	40010000 	.word	0x40010000

08001220 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001220:	6a03      	ldr	r3, [r0, #32]
 8001222:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001226:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001228:	6a03      	ldr	r3, [r0, #32]
{
 800122a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800122c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800122e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001230:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001232:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001236:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800123a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800123c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001240:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001244:	4d06      	ldr	r5, [pc, #24]	; (8001260 <TIM_OC4_SetConfig+0x40>)
 8001246:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001248:	bf02      	ittt	eq
 800124a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800124c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001250:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001254:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001256:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001258:	684a      	ldr	r2, [r1, #4]
 800125a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800125c:	6203      	str	r3, [r0, #32]
 800125e:	bd30      	pop	{r4, r5, pc}
 8001260:	40010000 	.word	0x40010000

08001264 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001264:	4a24      	ldr	r2, [pc, #144]	; (80012f8 <TIM_Base_SetConfig+0x94>)
  tmpcr1 = TIMx->CR1;
 8001266:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001268:	4290      	cmp	r0, r2
 800126a:	d00e      	beq.n	800128a <TIM_Base_SetConfig+0x26>
 800126c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001270:	d00b      	beq.n	800128a <TIM_Base_SetConfig+0x26>
 8001272:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001276:	4290      	cmp	r0, r2
 8001278:	d007      	beq.n	800128a <TIM_Base_SetConfig+0x26>
 800127a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800127e:	4290      	cmp	r0, r2
 8001280:	d003      	beq.n	800128a <TIM_Base_SetConfig+0x26>
 8001282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001286:	4290      	cmp	r0, r2
 8001288:	d115      	bne.n	80012b6 <TIM_Base_SetConfig+0x52>
    tmpcr1 |= Structure->CounterMode;
 800128a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800128c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001290:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001292:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <TIM_Base_SetConfig+0x94>)
 8001294:	4290      	cmp	r0, r2
 8001296:	d019      	beq.n	80012cc <TIM_Base_SetConfig+0x68>
 8001298:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800129c:	d016      	beq.n	80012cc <TIM_Base_SetConfig+0x68>
 800129e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80012a2:	4290      	cmp	r0, r2
 80012a4:	d012      	beq.n	80012cc <TIM_Base_SetConfig+0x68>
 80012a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012aa:	4290      	cmp	r0, r2
 80012ac:	d00e      	beq.n	80012cc <TIM_Base_SetConfig+0x68>
 80012ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012b2:	4290      	cmp	r0, r2
 80012b4:	d00a      	beq.n	80012cc <TIM_Base_SetConfig+0x68>
 80012b6:	4a11      	ldr	r2, [pc, #68]	; (80012fc <TIM_Base_SetConfig+0x98>)
 80012b8:	4290      	cmp	r0, r2
 80012ba:	d007      	beq.n	80012cc <TIM_Base_SetConfig+0x68>
 80012bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012c0:	4290      	cmp	r0, r2
 80012c2:	d003      	beq.n	80012cc <TIM_Base_SetConfig+0x68>
 80012c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012c8:	4290      	cmp	r0, r2
 80012ca:	d103      	bne.n	80012d4 <TIM_Base_SetConfig+0x70>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012cc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80012ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012d2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80012d4:	694a      	ldr	r2, [r1, #20]
 80012d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012da:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80012dc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012de:	688b      	ldr	r3, [r1, #8]
 80012e0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80012e2:	680b      	ldr	r3, [r1, #0]
 80012e4:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80012e6:	4b04      	ldr	r3, [pc, #16]	; (80012f8 <TIM_Base_SetConfig+0x94>)
 80012e8:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80012ea:	bf04      	itt	eq
 80012ec:	690b      	ldreq	r3, [r1, #16]
 80012ee:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80012f0:	2301      	movs	r3, #1
 80012f2:	6143      	str	r3, [r0, #20]
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40010000 	.word	0x40010000
 80012fc:	40014000 	.word	0x40014000

08001300 <HAL_TIM_PWM_Init>:
{
 8001300:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001302:	4604      	mov	r4, r0
 8001304:	b1a0      	cbz	r0, 8001330 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001306:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800130a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800130e:	b91b      	cbnz	r3, 8001318 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001310:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001314:	f000 fcfa 	bl	8001d0c <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001318:	2302      	movs	r3, #2
 800131a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800131e:	6820      	ldr	r0, [r4, #0]
 8001320:	1d21      	adds	r1, r4, #4
 8001322:	f7ff ff9f 	bl	8001264 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001326:	2301      	movs	r3, #1
 8001328:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800132c:	2000      	movs	r0, #0
 800132e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001330:	2001      	movs	r0, #1
}
 8001332:	bd10      	pop	{r4, pc}

08001334 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001334:	6a03      	ldr	r3, [r0, #32]
 8001336:	f023 0310 	bic.w	r3, r3, #16
 800133a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800133c:	6a03      	ldr	r3, [r0, #32]
{
 800133e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8001340:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001342:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001344:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001346:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800134a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800134e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001350:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001354:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001358:	4d0b      	ldr	r5, [pc, #44]	; (8001388 <TIM_OC2_SetConfig+0x54>)
 800135a:	42a8      	cmp	r0, r5
 800135c:	d10d      	bne.n	800137a <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800135e:	68cd      	ldr	r5, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001360:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001366:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800136a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800136c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001370:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001376:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800137a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800137c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800137e:	684a      	ldr	r2, [r1, #4]
 8001380:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001382:	6203      	str	r3, [r0, #32]
 8001384:	bd70      	pop	{r4, r5, r6, pc}
 8001386:	bf00      	nop
 8001388:	40010000 	.word	0x40010000

0800138c <HAL_TIM_PWM_ConfigChannel>:
{
 800138c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800138e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001392:	2b01      	cmp	r3, #1
{
 8001394:	4604      	mov	r4, r0
 8001396:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800139a:	d025      	beq.n	80013e8 <HAL_TIM_PWM_ConfigChannel+0x5c>
 800139c:	2301      	movs	r3, #1
 800139e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80013a2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80013a6:	2a0c      	cmp	r2, #12
 80013a8:	d818      	bhi.n	80013dc <HAL_TIM_PWM_ConfigChannel+0x50>
 80013aa:	e8df f002 	tbb	[pc, r2]
 80013ae:	1707      	.short	0x1707
 80013b0:	171e1717 	.word	0x171e1717
 80013b4:	172f1717 	.word	0x172f1717
 80013b8:	1717      	.short	0x1717
 80013ba:	40          	.byte	0x40
 80013bb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80013bc:	6820      	ldr	r0, [r4, #0]
 80013be:	f7ff fedd 	bl	800117c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80013c2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80013c4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	f042 0208 	orr.w	r2, r2, #8
 80013cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80013ce:	699a      	ldr	r2, [r3, #24]
 80013d0:	f022 0204 	bic.w	r2, r2, #4
 80013d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80013d6:	699a      	ldr	r2, [r3, #24]
 80013d8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013da:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80013dc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80013de:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80013e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80013e4:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80013e8:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80013ea:	6820      	ldr	r0, [r4, #0]
 80013ec:	f7ff ffa2 	bl	8001334 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80013f0:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80013f2:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80013f4:	699a      	ldr	r2, [r3, #24]
 80013f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80013fc:	699a      	ldr	r2, [r3, #24]
 80013fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001404:	699a      	ldr	r2, [r3, #24]
 8001406:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800140a:	e7e6      	b.n	80013da <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800140c:	6820      	ldr	r0, [r4, #0]
 800140e:	f7ff fedd 	bl	80011cc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001412:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001414:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001416:	69da      	ldr	r2, [r3, #28]
 8001418:	f042 0208 	orr.w	r2, r2, #8
 800141c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800141e:	69da      	ldr	r2, [r3, #28]
 8001420:	f022 0204 	bic.w	r2, r2, #4
 8001424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001426:	69da      	ldr	r2, [r3, #28]
 8001428:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800142a:	61da      	str	r2, [r3, #28]
      break;
 800142c:	e7d6      	b.n	80013dc <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800142e:	6820      	ldr	r0, [r4, #0]
 8001430:	f7ff fef6 	bl	8001220 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001434:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001436:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001438:	69da      	ldr	r2, [r3, #28]
 800143a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800143e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001440:	69da      	ldr	r2, [r3, #28]
 8001442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001446:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001448:	69da      	ldr	r2, [r3, #28]
 800144a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800144e:	e7ec      	b.n	800142a <HAL_TIM_PWM_ConfigChannel+0x9e>

08001450 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001450:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001452:	f001 011f 	and.w	r1, r1, #31
{
 8001456:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001458:	2401      	movs	r4, #1
 800145a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800145c:	ea23 0304 	bic.w	r3, r3, r4
 8001460:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001462:	6a03      	ldr	r3, [r0, #32]
 8001464:	408a      	lsls	r2, r1
 8001466:	431a      	orrs	r2, r3
 8001468:	6202      	str	r2, [r0, #32]
 800146a:	bd10      	pop	{r4, pc}

0800146c <HAL_TIM_PWM_Start>:
{
 800146c:	b510      	push	{r4, lr}
 800146e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001470:	2201      	movs	r2, #1
 8001472:	6800      	ldr	r0, [r0, #0]
 8001474:	f7ff ffec 	bl	8001450 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <HAL_TIM_PWM_Start+0x34>)
 800147c:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 800147e:	bf02      	ittt	eq
 8001480:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001482:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001486:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800148e:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8001490:	bf1e      	ittt	ne
 8001492:	681a      	ldrne	r2, [r3, #0]
 8001494:	f042 0201 	orrne.w	r2, r2, #1
 8001498:	601a      	strne	r2, [r3, #0]
}
 800149a:	2000      	movs	r0, #0
 800149c:	bd10      	pop	{r4, pc}
 800149e:	bf00      	nop
 80014a0:	40010000 	.word	0x40010000

080014a4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80014a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80014a8:	2b01      	cmp	r3, #1
{
 80014aa:	b530      	push	{r4, r5, lr}
 80014ac:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80014b0:	d02d      	beq.n	800150e <HAL_TIMEx_MasterConfigSynchronization+0x6a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80014b6:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80014b8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80014ba:	685c      	ldr	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 80014bc:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  __HAL_LOCK(htim);
 80014c0:	2201      	movs	r2, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80014c2:	432c      	orrs	r4, r5
  __HAL_LOCK(htim);
 80014c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80014c8:	689a      	ldr	r2, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80014ca:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014cc:	4c11      	ldr	r4, [pc, #68]	; (8001514 <HAL_TIMEx_MasterConfigSynchronization+0x70>)
 80014ce:	42a3      	cmp	r3, r4
 80014d0:	d012      	beq.n	80014f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80014d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d6:	d00f      	beq.n	80014f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80014d8:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80014dc:	42a3      	cmp	r3, r4
 80014de:	d00b      	beq.n	80014f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80014e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014e4:	42a3      	cmp	r3, r4
 80014e6:	d007      	beq.n	80014f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80014e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014ec:	42a3      	cmp	r3, r4
 80014ee:	d003      	beq.n	80014f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
 80014f0:	f504 349a 	add.w	r4, r4, #78848	; 0x13400
 80014f4:	42a3      	cmp	r3, r4
 80014f6:	d104      	bne.n	8001502 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014f8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80014fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014fe:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001500:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001502:	2301      	movs	r3, #1
 8001504:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001508:	2300      	movs	r3, #0
 800150a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800150e:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001510:	bd30      	pop	{r4, r5, pc}
 8001512:	bf00      	nop
 8001514:	40010000 	.word	0x40010000

08001518 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001518:	6803      	ldr	r3, [r0, #0]
 800151a:	68da      	ldr	r2, [r3, #12]
 800151c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001520:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001522:	695a      	ldr	r2, [r3, #20]
 8001524:	f022 0201 	bic.w	r2, r2, #1
 8001528:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800152a:	2320      	movs	r3, #32
 800152c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001530:	4770      	bx	lr
	...

08001534 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001534:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001536:	6803      	ldr	r3, [r0, #0]
 8001538:	68c1      	ldr	r1, [r0, #12]
 800153a:	691a      	ldr	r2, [r3, #16]
{
 800153c:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800153e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001542:	430a      	orrs	r2, r1
 8001544:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001546:	6925      	ldr	r5, [r4, #16]
 8001548:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 800154a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800154c:	69c0      	ldr	r0, [r0, #28]
 800154e:	432a      	orrs	r2, r5
 8001550:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8001552:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001556:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8001558:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800155c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800155e:	430a      	orrs	r2, r1
 8001560:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001562:	695a      	ldr	r2, [r3, #20]
 8001564:	69a1      	ldr	r1, [r4, #24]
 8001566:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800156a:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800156c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001570:	615a      	str	r2, [r3, #20]
 8001572:	4a25      	ldr	r2, [pc, #148]	; (8001608 <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001574:	d129      	bne.n	80015ca <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001576:	4293      	cmp	r3, r2
 8001578:	d003      	beq.n	8001582 <UART_SetConfig+0x4e>
 800157a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800157e:	4293      	cmp	r3, r2
 8001580:	d120      	bne.n	80015c4 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001582:	f7ff fdeb 	bl	800115c <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001586:	6862      	ldr	r2, [r4, #4]
 8001588:	6825      	ldr	r5, [r4, #0]
 800158a:	1892      	adds	r2, r2, r2
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	f04f 0119 	mov.w	r1, #25
 8001594:	415b      	adcs	r3, r3
 8001596:	fba0 0101 	umull	r0, r1, r0, r1
 800159a:	f7fe fe1d 	bl	80001d8 <__aeabi_uldivmod>
 800159e:	2164      	movs	r1, #100	; 0x64
 80015a0:	fbb0 f4f1 	udiv	r4, r0, r1
 80015a4:	fb01 0314 	mls	r3, r1, r4, r0
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	3332      	adds	r3, #50	; 0x32
 80015ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b0:	f003 0207 	and.w	r2, r3, #7
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 80015ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80015be:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015c0:	60ab      	str	r3, [r5, #8]
 80015c2:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80015c4:	f7ff fdba 	bl	800113c <HAL_RCC_GetPCLK1Freq>
 80015c8:	e7dd      	b.n	8001586 <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d002      	beq.n	80015d4 <UART_SetConfig+0xa0>
 80015ce:	4a0f      	ldr	r2, [pc, #60]	; (800160c <UART_SetConfig+0xd8>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d116      	bne.n	8001602 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 80015d4:	f7ff fdc2 	bl	800115c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80015d8:	6863      	ldr	r3, [r4, #4]
 80015da:	6825      	ldr	r5, [r4, #0]
 80015dc:	2119      	movs	r1, #25
 80015de:	009a      	lsls	r2, r3, #2
 80015e0:	fba0 0101 	umull	r0, r1, r0, r1
 80015e4:	0f9b      	lsrs	r3, r3, #30
 80015e6:	f7fe fdf7 	bl	80001d8 <__aeabi_uldivmod>
 80015ea:	2264      	movs	r2, #100	; 0x64
 80015ec:	fbb0 f1f2 	udiv	r1, r0, r2
 80015f0:	fb02 0311 	mls	r3, r2, r1, r0
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	3332      	adds	r3, #50	; 0x32
 80015f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80015fc:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8001600:	e7de      	b.n	80015c0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001602:	f7ff fd9b 	bl	800113c <HAL_RCC_GetPCLK1Freq>
 8001606:	e7e7      	b.n	80015d8 <UART_SetConfig+0xa4>
 8001608:	40011000 	.word	0x40011000
 800160c:	40011400 	.word	0x40011400

08001610 <HAL_UART_Init>:
{
 8001610:	b510      	push	{r4, lr}
  if (huart == NULL)
 8001612:	4604      	mov	r4, r0
 8001614:	b340      	cbz	r0, 8001668 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001616:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800161a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800161e:	b91b      	cbnz	r3, 8001628 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001620:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001624:	f000 fbd8 	bl	8001dd8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001628:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800162a:	2324      	movs	r3, #36	; 0x24
 800162c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001630:	68d3      	ldr	r3, [r2, #12]
 8001632:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001636:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001638:	4620      	mov	r0, r4
 800163a:	f7ff ff7b 	bl	8001534 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001646:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001648:	695a      	ldr	r2, [r3, #20]
 800164a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800164e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001650:	68da      	ldr	r2, [r3, #12]
 8001652:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001656:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001658:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800165a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800165c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800165e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001662:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001666:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001668:	2001      	movs	r0, #1
}
 800166a:	bd10      	pop	{r4, pc}

0800166c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 800166c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001670:	2b20      	cmp	r3, #32
 8001672:	d120      	bne.n	80016b6 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8001674:	b1e9      	cbz	r1, 80016b2 <HAL_UART_Receive_IT+0x46>
 8001676:	b1e2      	cbz	r2, 80016b2 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8001678:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800167c:	2b01      	cmp	r3, #1
 800167e:	d01a      	beq.n	80016b6 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8001680:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 8001682:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001684:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001686:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001688:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800168a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800168e:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001690:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001692:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8001694:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001698:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 800169c:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800169e:	6951      	ldr	r1, [r2, #20]
 80016a0:	f041 0101 	orr.w	r1, r1, #1
 80016a4:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80016a6:	68d1      	ldr	r1, [r2, #12]
 80016a8:	f041 0120 	orr.w	r1, r1, #32
 80016ac:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 80016ae:	4618      	mov	r0, r3
 80016b0:	4770      	bx	lr
      return HAL_ERROR;
 80016b2:	2001      	movs	r0, #1
 80016b4:	4770      	bx	lr
    return HAL_BUSY;
 80016b6:	2002      	movs	r0, #2
}
 80016b8:	4770      	bx	lr

080016ba <HAL_UART_TxCpltCallback>:
 80016ba:	4770      	bx	lr

080016bc <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80016bc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80016c0:	2b22      	cmp	r3, #34	; 0x22
{
 80016c2:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80016c4:	d136      	bne.n	8001734 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016c6:	6883      	ldr	r3, [r0, #8]
 80016c8:	6901      	ldr	r1, [r0, #16]
 80016ca:	6802      	ldr	r2, [r0, #0]
 80016cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80016d2:	d123      	bne.n	800171c <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80016d4:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80016d6:	b9e9      	cbnz	r1, 8001714 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80016d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016dc:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80016e0:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80016e2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80016e4:	3c01      	subs	r4, #1
 80016e6:	b2a4      	uxth	r4, r4
 80016e8:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80016ea:	b98c      	cbnz	r4, 8001710 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80016ec:	6803      	ldr	r3, [r0, #0]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	f022 0220 	bic.w	r2, r2, #32
 80016f4:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016fc:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80016fe:	695a      	ldr	r2, [r3, #20]
 8001700:	f022 0201 	bic.w	r2, r2, #1
 8001704:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001706:	2320      	movs	r3, #32
 8001708:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800170c:	f000 f8c0 	bl	8001890 <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001710:	2000      	movs	r0, #0
}
 8001712:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	f823 2b01 	strh.w	r2, [r3], #1
 800171a:	e7e1      	b.n	80016e0 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800171c:	b921      	cbnz	r1, 8001728 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800171e:	1c59      	adds	r1, r3, #1
 8001720:	6852      	ldr	r2, [r2, #4]
 8001722:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001724:	701a      	strb	r2, [r3, #0]
 8001726:	e7dc      	b.n	80016e2 <UART_Receive_IT+0x26>
 8001728:	6852      	ldr	r2, [r2, #4]
 800172a:	1c59      	adds	r1, r3, #1
 800172c:	6281      	str	r1, [r0, #40]	; 0x28
 800172e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001732:	e7f7      	b.n	8001724 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001734:	2002      	movs	r0, #2
 8001736:	bd10      	pop	{r4, pc}

08001738 <HAL_UART_ErrorCallback>:
 8001738:	4770      	bx	lr
	...

0800173c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800173c:	6803      	ldr	r3, [r0, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001740:	68d9      	ldr	r1, [r3, #12]
{
 8001742:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001744:	0716      	lsls	r6, r2, #28
{
 8001746:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001748:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800174a:	d107      	bne.n	800175c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800174c:	0696      	lsls	r6, r2, #26
 800174e:	d55c      	bpl.n	800180a <HAL_UART_IRQHandler+0xce>
 8001750:	068d      	lsls	r5, r1, #26
 8001752:	d55a      	bpl.n	800180a <HAL_UART_IRQHandler+0xce>
}
 8001754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001758:	f7ff bfb0 	b.w	80016bc <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800175c:	f015 0501 	ands.w	r5, r5, #1
 8001760:	d102      	bne.n	8001768 <HAL_UART_IRQHandler+0x2c>
 8001762:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001766:	d050      	beq.n	800180a <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001768:	07d0      	lsls	r0, r2, #31
 800176a:	d505      	bpl.n	8001778 <HAL_UART_IRQHandler+0x3c>
 800176c:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800176e:	bf42      	ittt	mi
 8001770:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001772:	f043 0301 	orrmi.w	r3, r3, #1
 8001776:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001778:	0756      	lsls	r6, r2, #29
 800177a:	d504      	bpl.n	8001786 <HAL_UART_IRQHandler+0x4a>
 800177c:	b11d      	cbz	r5, 8001786 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800177e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001780:	f043 0302 	orr.w	r3, r3, #2
 8001784:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001786:	0790      	lsls	r0, r2, #30
 8001788:	d504      	bpl.n	8001794 <HAL_UART_IRQHandler+0x58>
 800178a:	b11d      	cbz	r5, 8001794 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800178c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800178e:	f043 0304 	orr.w	r3, r3, #4
 8001792:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001794:	0713      	lsls	r3, r2, #28
 8001796:	d506      	bpl.n	80017a6 <HAL_UART_IRQHandler+0x6a>
 8001798:	068e      	lsls	r6, r1, #26
 800179a:	d400      	bmi.n	800179e <HAL_UART_IRQHandler+0x62>
 800179c:	b11d      	cbz	r5, 80017a6 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800179e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017a0:	f043 0308 	orr.w	r3, r3, #8
 80017a4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d066      	beq.n	800187a <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017ac:	0695      	lsls	r5, r2, #26
 80017ae:	d504      	bpl.n	80017ba <HAL_UART_IRQHandler+0x7e>
 80017b0:	0688      	lsls	r0, r1, #26
 80017b2:	d502      	bpl.n	80017ba <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff ff81 	bl	80016bc <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80017ba:	6823      	ldr	r3, [r4, #0]
 80017bc:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80017be:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80017c0:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 80017c2:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80017c4:	d402      	bmi.n	80017cc <HAL_UART_IRQHandler+0x90>
 80017c6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80017ca:	d01a      	beq.n	8001802 <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 80017cc:	f7ff fea4 	bl	8001518 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	0652      	lsls	r2, r2, #25
 80017d6:	d510      	bpl.n	80017fa <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017d8:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80017da:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017e0:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 80017e2:	b150      	cbz	r0, 80017fa <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <HAL_UART_IRQHandler+0x140>)
 80017e6:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80017e8:	f7ff f952 	bl	8000a90 <HAL_DMA_Abort_IT>
 80017ec:	2800      	cmp	r0, #0
 80017ee:	d044      	beq.n	800187a <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017f0:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80017f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017f6:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80017f8:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80017fa:	4620      	mov	r0, r4
 80017fc:	f7ff ff9c 	bl	8001738 <HAL_UART_ErrorCallback>
 8001800:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001802:	f7ff ff99 	bl	8001738 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001806:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001808:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800180a:	0616      	lsls	r6, r2, #24
 800180c:	d527      	bpl.n	800185e <HAL_UART_IRQHandler+0x122>
 800180e:	060d      	lsls	r5, r1, #24
 8001810:	d525      	bpl.n	800185e <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001812:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001816:	2a21      	cmp	r2, #33	; 0x21
 8001818:	d12f      	bne.n	800187a <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800181a:	68a2      	ldr	r2, [r4, #8]
 800181c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001820:	6a22      	ldr	r2, [r4, #32]
 8001822:	d117      	bne.n	8001854 <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001824:	8811      	ldrh	r1, [r2, #0]
 8001826:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800182a:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800182c:	6921      	ldr	r1, [r4, #16]
 800182e:	b979      	cbnz	r1, 8001850 <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 8001830:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 8001832:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001834:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001836:	3a01      	subs	r2, #1
 8001838:	b292      	uxth	r2, r2
 800183a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800183c:	b9ea      	cbnz	r2, 800187a <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800183e:	68da      	ldr	r2, [r3, #12]
 8001840:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001844:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 8001850:	3201      	adds	r2, #1
 8001852:	e7ee      	b.n	8001832 <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001854:	1c51      	adds	r1, r2, #1
 8001856:	6221      	str	r1, [r4, #32]
 8001858:	7812      	ldrb	r2, [r2, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	e7ea      	b.n	8001834 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800185e:	0650      	lsls	r0, r2, #25
 8001860:	d50b      	bpl.n	800187a <HAL_UART_IRQHandler+0x13e>
 8001862:	064a      	lsls	r2, r1, #25
 8001864:	d509      	bpl.n	800187a <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800186c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800186e:	2320      	movs	r3, #32
 8001870:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001874:	4620      	mov	r0, r4
 8001876:	f7ff ff20 	bl	80016ba <HAL_UART_TxCpltCallback>
 800187a:	bd70      	pop	{r4, r5, r6, pc}
 800187c:	08001881 	.word	0x08001881

08001880 <UART_DMAAbortOnError>:
{
 8001880:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001882:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8001884:	2300      	movs	r3, #0
 8001886:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001888:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800188a:	f7ff ff55 	bl	8001738 <HAL_UART_ErrorCallback>
 800188e:	bd08      	pop	{r3, pc}

08001890 <HAL_UART_RxCpltCallback>:

uint8_t myusartBuf[MSGLENGTH];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  if (huart->Instance == USART1)
 8001890:	6802      	ldr	r2, [r0, #0]
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <HAL_UART_RxCpltCallback+0x14>)
 8001894:	429a      	cmp	r2, r3
 8001896:	d104      	bne.n	80018a2 <HAL_UART_RxCpltCallback+0x12>
  {
   if(myusartBuf[MSGLENGTH-1] == '\n')	// process data
   {
      /* Receive MSGLENGTH new bytes */
      HAL_UART_Receive_IT(&huart1, myusartBuf, MSGLENGTH);
 8001898:	2205      	movs	r2, #5
 800189a:	4903      	ldr	r1, [pc, #12]	; (80018a8 <HAL_UART_RxCpltCallback+0x18>)
 800189c:	4803      	ldr	r0, [pc, #12]	; (80018ac <HAL_UART_RxCpltCallback+0x1c>)
 800189e:	f7ff bee5 	b.w	800166c <HAL_UART_Receive_IT>
 80018a2:	4770      	bx	lr
 80018a4:	40011000 	.word	0x40011000
 80018a8:	200000ac 	.word	0x200000ac
 80018ac:	200000fc 	.word	0x200000fc

080018b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b0:	b510      	push	{r4, lr}
 80018b2:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018b4:	2230      	movs	r2, #48	; 0x30
 80018b6:	2100      	movs	r1, #0
 80018b8:	a808      	add	r0, sp, #32
 80018ba:	f000 fb37 	bl	8001f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018be:	2100      	movs	r1, #0
 80018c0:	2214      	movs	r2, #20
 80018c2:	a803      	add	r0, sp, #12
 80018c4:	f000 fb32 	bl	8001f2c <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c8:	2400      	movs	r4, #0
 80018ca:	4b16      	ldr	r3, [pc, #88]	; (8001924 <SystemClock_Config+0x74>)
 80018cc:	9401      	str	r4, [sp, #4]
 80018ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018d4:	641a      	str	r2, [r3, #64]	; 0x40
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <SystemClock_Config+0x78>)
 80018e2:	9402      	str	r4, [sp, #8]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018ee:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f4:	9302      	str	r3, [sp, #8]
 80018f6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f8:	2302      	movs	r3, #2
 80018fa:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018fc:	2301      	movs	r3, #1
 80018fe:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001900:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001902:	2310      	movs	r3, #16
 8001904:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001906:	f7ff f9a9 	bl	8000c5c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800190c:	4621      	mov	r1, r4
 800190e:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001910:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001912:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001914:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001916:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001918:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800191a:	f7ff fb73 	bl	8001004 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800191e:	b014      	add	sp, #80	; 0x50
 8001920:	bd10      	pop	{r4, pc}
 8001922:	bf00      	nop
 8001924:	40023800 	.word	0x40023800
 8001928:	40007000 	.word	0x40007000

0800192c <main>:
{
 800192c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001930:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8001932:	f7fe fdfd 	bl	8000530 <HAL_Init>
  SystemClock_Config();
 8001936:	f7ff ffbb 	bl	80018b0 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193a:	2214      	movs	r2, #20
 800193c:	2100      	movs	r1, #0
 800193e:	eb0d 0002 	add.w	r0, sp, r2

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001942:	2400      	movs	r4, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f000 faf2 	bl	8001f2c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001948:	4bae      	ldr	r3, [pc, #696]	; (8001c04 <main+0x2d8>)
 800194a:	9400      	str	r4, [sp, #0]
 800194c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800194e:	48ae      	ldr	r0, [pc, #696]	; (8001c08 <main+0x2dc>)
  huart1.Instance = USART1;
 8001950:	4fae      	ldr	r7, [pc, #696]	; (8001c0c <main+0x2e0>)
  hadc1.Instance = ADC1;
 8001952:	4daf      	ldr	r5, [pc, #700]	; (8001c10 <main+0x2e4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001954:	f042 0204 	orr.w	r2, r2, #4
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
 800195a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800195c:	f002 0204 	and.w	r2, r2, #4
 8001960:	9200      	str	r2, [sp, #0]
 8001962:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001964:	9401      	str	r4, [sp, #4]
 8001966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001968:	f042 0201 	orr.w	r2, r2, #1
 800196c:	631a      	str	r2, [r3, #48]	; 0x30
 800196e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001970:	f002 0201 	and.w	r2, r2, #1
 8001974:	9201      	str	r2, [sp, #4]
 8001976:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001978:	9402      	str	r4, [sp, #8]
 800197a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800197c:	f042 0202 	orr.w	r2, r2, #2
 8001980:	631a      	str	r2, [r3, #48]	; 0x30
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001988:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800198a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800198c:	f44f 5100 	mov.w	r1, #8192	; 0x2000

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001994:	f7ff f95c 	bl	8000c50 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001998:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199c:	a905      	add	r1, sp, #20
 800199e:	489a      	ldr	r0, [pc, #616]	; (8001c08 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019a0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a8:	f7ff f884 	bl	8000ab4 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 80019ac:	4a99      	ldr	r2, [pc, #612]	; (8001c14 <main+0x2e8>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019ae:	60bc      	str	r4, [r7, #8]
  huart1.Init.BaudRate = 115200;
 80019b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80019b4:	e887 000c 	stmia.w	r7, {r2, r3}
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019b8:	4638      	mov	r0, r7
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019ba:	230c      	movs	r3, #12
 80019bc:	617b      	str	r3, [r7, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019be:	60fc      	str	r4, [r7, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019c0:	613c      	str	r4, [r7, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	61bc      	str	r4, [r7, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c4:	61fc      	str	r4, [r7, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019c6:	f7ff fe23 	bl	8001610 <HAL_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80019ca:	2210      	movs	r2, #16
 80019cc:	4621      	mov	r1, r4
 80019ce:	a805      	add	r0, sp, #20
 80019d0:	f000 faac 	bl	8001f2c <memset>
  hadc1.Instance = ADC1;
 80019d4:	4b90      	ldr	r3, [pc, #576]	; (8001c18 <main+0x2ec>)
  hadc1.Init.ScanConvMode = ENABLE;
 80019d6:	612e      	str	r6, [r5, #16]
  hadc1.Init.NbrOfConversion = 2;
 80019d8:	f04f 0802 	mov.w	r8, #2
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019dc:	e885 0018 	stmia.w	r5, {r3, r4}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019e0:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019e2:	4b8e      	ldr	r3, [pc, #568]	; (8001c1c <main+0x2f0>)
  hadc1.Init.ContinuousConvMode = ENABLE;
 80019e4:	762e      	strb	r6, [r5, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019e6:	62ab      	str	r3, [r5, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 2;
 80019e8:	f8c5 801c 	str.w	r8, [r5, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019ec:	616e      	str	r6, [r5, #20]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019ee:	60ac      	str	r4, [r5, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019f0:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019f4:	62ec      	str	r4, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019f6:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019f8:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019fc:	f7fe fdc4 	bl	8000588 <HAL_ADC_Init>
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001a00:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a02:	a905      	add	r1, sp, #20
 8001a04:	4628      	mov	r0, r5
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001a06:	9307      	str	r3, [sp, #28]
  sConfig.Rank = 1;
 8001a08:	9606      	str	r6, [sp, #24]
  sConfig.Channel = ADC_CHANNEL_0;
 8001a0a:	9405      	str	r4, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a0c:	f7fe ff34 	bl	8000878 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a10:	a905      	add	r1, sp, #20
 8001a12:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8001a14:	9605      	str	r6, [sp, #20]
  sConfig.Rank = 2;
 8001a16:	f8cd 8018 	str.w	r8, [sp, #24]
  htim3.Instance = TIM3;
 8001a1a:	4e81      	ldr	r6, [pc, #516]	; (8001c20 <main+0x2f4>)
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a1c:	f7fe ff2c 	bl	8000878 <HAL_ADC_ConfigChannel>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a20:	221c      	movs	r2, #28
 8001a22:	4621      	mov	r1, r4
 8001a24:	a805      	add	r0, sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a26:	9403      	str	r4, [sp, #12]
 8001a28:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2a:	f000 fa7f 	bl	8001f2c <memset>
  htim3.Instance = TIM3;
 8001a2e:	4b7d      	ldr	r3, [pc, #500]	; (8001c24 <main+0x2f8>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a30:	60b4      	str	r4, [r6, #8]
  htim3.Init.Period = 2048;
 8001a32:	f44f 6a00 	mov.w	sl, #2048	; 0x800
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a36:	f04f 0980 	mov.w	r9, #128	; 0x80
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a3a:	4630      	mov	r0, r6
  htim3.Init.Prescaler = 0;
 8001a3c:	e886 0018 	stmia.w	r6, {r3, r4}
  htim3.Init.Period = 2048;
 8001a40:	f8c6 a00c 	str.w	sl, [r6, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a44:	6134      	str	r4, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a46:	f8c6 9018 	str.w	r9, [r6, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a4a:	f7ff fc59 	bl	8001300 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a4e:	a903      	add	r1, sp, #12
 8001a50:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a52:	f04f 0860 	mov.w	r8, #96	; 0x60
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a56:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a58:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a5a:	f7ff fd23 	bl	80014a4 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5e:	4622      	mov	r2, r4
 8001a60:	a905      	add	r1, sp, #20
 8001a62:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a64:	f8cd 8014 	str.w	r8, [sp, #20]
  sConfigOC.Pulse = 0;
 8001a68:	9406      	str	r4, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a6a:	9407      	str	r4, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a6c:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a6e:	f7ff fc8d 	bl	800138c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a72:	2204      	movs	r2, #4
 8001a74:	a905      	add	r1, sp, #20
 8001a76:	4630      	mov	r0, r6
 8001a78:	f7ff fc88 	bl	800138c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8001a7c:	4630      	mov	r0, r6
 8001a7e:	f000 f96f 	bl	8001d60 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 8001a82:	4e69      	ldr	r6, [pc, #420]	; (8001c28 <main+0x2fc>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	9403      	str	r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a86:	221c      	movs	r2, #28
 8001a88:	4621      	mov	r1, r4
 8001a8a:	a805      	add	r0, sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a8e:	f000 fa4d 	bl	8001f2c <memset>
  htim4.Instance = TIM4;
 8001a92:	4b66      	ldr	r3, [pc, #408]	; (8001c2c <main+0x300>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	60b4      	str	r4, [r6, #8]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a96:	4630      	mov	r0, r6
  htim4.Init.Prescaler = 0;
 8001a98:	e886 0018 	stmia.w	r6, {r3, r4}
  htim4.Init.Period = 2048;
 8001a9c:	f8c6 a00c 	str.w	sl, [r6, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa0:	6134      	str	r4, [r6, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aa2:	f8c6 9018 	str.w	r9, [r6, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001aa6:	f7ff fc2b 	bl	8001300 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aaa:	a903      	add	r1, sp, #12
 8001aac:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aae:	9403      	str	r4, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab0:	9404      	str	r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ab2:	f7ff fcf7 	bl	80014a4 <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	a905      	add	r1, sp, #20
 8001aba:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001abc:	f8cd 8014 	str.w	r8, [sp, #20]
  sConfigOC.Pulse = 0;
 8001ac0:	9406      	str	r4, [sp, #24]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ac2:	9407      	str	r4, [sp, #28]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ac4:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ac6:	f7ff fc61 	bl	800138c <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001aca:	2204      	movs	r2, #4
 8001acc:	a905      	add	r1, sp, #20
 8001ace:	4630      	mov	r0, r6
 8001ad0:	f7ff fc5c 	bl	800138c <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim4);
 8001ad4:	4630      	mov	r0, r6
 8001ad6:	f000 f943 	bl	8001d60 <HAL_TIM_MspPostInit>
  HAL_UART_Receive_IT(&huart1, myusartBuf, MSGLENGTH);
 8001ada:	4638      	mov	r0, r7
 8001adc:	2205      	movs	r2, #5
 8001ade:	4954      	ldr	r1, [pc, #336]	; (8001c30 <main+0x304>)
 8001ae0:	f7ff fdc4 	bl	800166c <HAL_UART_Receive_IT>
    if(ADCValue1 > (2048 + 100))
 8001ae4:	f640 0764 	movw	r7, #2148	; 0x864
    if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8001ae8:	4628      	mov	r0, r5
 8001aea:	f7fe fdf3 	bl	80006d4 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(&hadc1, 500) != HAL_OK)
 8001aee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001af2:	4628      	mov	r0, r5
 8001af4:	f7fe fe6c 	bl	80007d0 <HAL_ADC_PollForConversion>
 8001af8:	2800      	cmp	r0, #0
 8001afa:	d15e      	bne.n	8001bba <main+0x28e>
      ADCValue1 = HAL_ADC_GetValue(&hadc1);
 8001afc:	4628      	mov	r0, r5
 8001afe:	f7fe feb7 	bl	8000870 <HAL_ADC_GetValue>
 8001b02:	4606      	mov	r6, r0
    if (HAL_ADC_PollForConversion(&hadc1, 500) != HAL_OK)
 8001b04:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b08:	4628      	mov	r0, r5
 8001b0a:	f7fe fe61 	bl	80007d0 <HAL_ADC_PollForConversion>
 8001b0e:	2800      	cmp	r0, #0
 8001b10:	d156      	bne.n	8001bc0 <main+0x294>
        ADCValue2 = HAL_ADC_GetValue(&hadc1);
 8001b12:	4628      	mov	r0, r5
 8001b14:	f7fe feac 	bl	8000870 <HAL_ADC_GetValue>
 8001b18:	4604      	mov	r4, r0
    HAL_ADC_Stop(&hadc1);
 8001b1a:	4628      	mov	r0, r5
 8001b1c:	f7fe fe3a 	bl	8000794 <HAL_ADC_Stop>
    if(ADCValue1 > (2048 + 100))
 8001b20:	42be      	cmp	r6, r7
 8001b22:	f04f 0960 	mov.w	r9, #96	; 0x60
 8001b26:	dd4e      	ble.n	8001bc6 <main+0x29a>
      sConfigOC.Pulse = 0;
 8001b28:	f04f 0800 	mov.w	r8, #0
      HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8001b2c:	4642      	mov	r2, r8
 8001b2e:	a905      	add	r1, sp, #20
 8001b30:	483b      	ldr	r0, [pc, #236]	; (8001c20 <main+0x2f4>)
      sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b32:	f8cd 9014 	str.w	r9, [sp, #20]
      sConfigOC.Pulse = 0;
 8001b36:	f8cd 8018 	str.w	r8, [sp, #24]
      sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3a:	f8cd 801c 	str.w	r8, [sp, #28]
      sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
      int speed = ADCValue1 - 2048;
 8001b42:	f5a6 6600 	sub.w	r6, r6, #2048	; 0x800
      HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8001b46:	f7ff fc21 	bl	800138c <HAL_TIM_PWM_ConfigChannel>
      HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b4a:	4641      	mov	r1, r8
 8001b4c:	4834      	ldr	r0, [pc, #208]	; (8001c20 <main+0x2f4>)
 8001b4e:	f7ff fc8d 	bl	800146c <HAL_TIM_PWM_Start>
      sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b52:	f8cd 9014 	str.w	r9, [sp, #20]
      sConfigOC.Pulse = speed;
 8001b56:	9606      	str	r6, [sp, #24]
      sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b58:	f8cd 801c 	str.w	r8, [sp, #28]
      sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b5c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
        HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8001b60:	2204      	movs	r2, #4
 8001b62:	a905      	add	r1, sp, #20
 8001b64:	482e      	ldr	r0, [pc, #184]	; (8001c20 <main+0x2f4>)
 8001b66:	f7ff fc11 	bl	800138c <HAL_TIM_PWM_ConfigChannel>
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	482c      	ldr	r0, [pc, #176]	; (8001c20 <main+0x2f4>)
 8001b6e:	f7ff fc7d 	bl	800146c <HAL_TIM_PWM_Start>
    if(ADCValue2 > (2048 + 100))
 8001b72:	42bc      	cmp	r4, r7
 8001b74:	f04f 0860 	mov.w	r8, #96	; 0x60
 8001b78:	dd5c      	ble.n	8001c34 <main+0x308>
      sConfigOC.Pulse = 0;
 8001b7a:	2600      	movs	r6, #0
      HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8001b7c:	4632      	mov	r2, r6
 8001b7e:	a905      	add	r1, sp, #20
 8001b80:	4829      	ldr	r0, [pc, #164]	; (8001c28 <main+0x2fc>)
      sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b82:	f8cd 8014 	str.w	r8, [sp, #20]
      sConfigOC.Pulse = 0;
 8001b86:	9606      	str	r6, [sp, #24]
      sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b88:	9607      	str	r6, [sp, #28]
      sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b8a:	9609      	str	r6, [sp, #36]	; 0x24
      int speed = ADCValue2 - 2048;
 8001b8c:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
      HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8001b90:	f7ff fbfc 	bl	800138c <HAL_TIM_PWM_ConfigChannel>
      HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001b94:	4631      	mov	r1, r6
 8001b96:	4824      	ldr	r0, [pc, #144]	; (8001c28 <main+0x2fc>)
 8001b98:	f7ff fc68 	bl	800146c <HAL_TIM_PWM_Start>
      sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b9c:	f8cd 8014 	str.w	r8, [sp, #20]
      sConfigOC.Pulse = speed;
 8001ba0:	9406      	str	r4, [sp, #24]
      sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba2:	9607      	str	r6, [sp, #28]
      sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba4:	9609      	str	r6, [sp, #36]	; 0x24
        HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 8001ba6:	a905      	add	r1, sp, #20
 8001ba8:	2204      	movs	r2, #4
 8001baa:	481f      	ldr	r0, [pc, #124]	; (8001c28 <main+0x2fc>)
 8001bac:	f7ff fbee 	bl	800138c <HAL_TIM_PWM_ConfigChannel>
        HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	481d      	ldr	r0, [pc, #116]	; (8001c28 <main+0x2fc>)
 8001bb4:	f7ff fc5a 	bl	800146c <HAL_TIM_PWM_Start>
 8001bb8:	e796      	b.n	8001ae8 <main+0x1bc>
      ADCValue1=-1;
 8001bba:	f04f 36ff 	mov.w	r6, #4294967295
 8001bbe:	e7a1      	b.n	8001b04 <main+0x1d8>
        ADCValue2=-1;
 8001bc0:	f04f 34ff 	mov.w	r4, #4294967295
 8001bc4:	e7a9      	b.n	8001b1a <main+0x1ee>
      if(ADCValue1 < (2048 - 100))
 8001bc6:	f240 739b 	movw	r3, #1947	; 0x79b
 8001bca:	429e      	cmp	r6, r3
        int speed = 2048 - ADCValue1;
 8001bcc:	bfd7      	itett	le
 8001bce:	f5c6 6600 	rsble	r6, r6, #2048	; 0x800
        sConfigOC.Pulse = 0;
 8001bd2:	2600      	movgt	r6, #0
        sConfigOC.Pulse = speed;
 8001bd4:	9606      	strle	r6, [sp, #24]
        sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd6:	2600      	movle	r6, #0
        HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8001bd8:	4632      	mov	r2, r6
 8001bda:	a905      	add	r1, sp, #20
 8001bdc:	4810      	ldr	r0, [pc, #64]	; (8001c20 <main+0x2f4>)
        sConfigOC.Pulse = 0;
 8001bde:	bfc8      	it	gt
 8001be0:	9606      	strgt	r6, [sp, #24]
        sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be2:	f8cd 9014 	str.w	r9, [sp, #20]
        sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001be6:	9607      	str	r6, [sp, #28]
        sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001be8:	9609      	str	r6, [sp, #36]	; 0x24
        HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1);
 8001bea:	f7ff fbcf 	bl	800138c <HAL_TIM_PWM_ConfigChannel>
        HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001bee:	4631      	mov	r1, r6
 8001bf0:	480b      	ldr	r0, [pc, #44]	; (8001c20 <main+0x2f4>)
 8001bf2:	f7ff fc3b 	bl	800146c <HAL_TIM_PWM_Start>
        sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bf6:	f8cd 9014 	str.w	r9, [sp, #20]
        sConfigOC.Pulse = 0;
 8001bfa:	9606      	str	r6, [sp, #24]
        sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bfc:	9607      	str	r6, [sp, #28]
        sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bfe:	9609      	str	r6, [sp, #36]	; 0x24
 8001c00:	e7ae      	b.n	8001b60 <main+0x234>
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020800 	.word	0x40020800
 8001c0c:	200000fc 	.word	0x200000fc
 8001c10:	200000b4 	.word	0x200000b4
 8001c14:	40011000 	.word	0x40011000
 8001c18:	40012000 	.word	0x40012000
 8001c1c:	0f000001 	.word	0x0f000001
 8001c20:	2000006c 	.word	0x2000006c
 8001c24:	40000400 	.word	0x40000400
 8001c28:	2000002c 	.word	0x2000002c
 8001c2c:	40000800 	.word	0x40000800
 8001c30:	200000ac 	.word	0x200000ac
      if(ADCValue2 < (2048 - 100))
 8001c34:	f240 739b 	movw	r3, #1947	; 0x79b
 8001c38:	429c      	cmp	r4, r3
        int speed = 2048 - ADCValue2;
 8001c3a:	bfd7      	itett	le
 8001c3c:	f5c4 6400 	rsble	r4, r4, #2048	; 0x800
        sConfigOC.Pulse = 0;
 8001c40:	2400      	movgt	r4, #0
        sConfigOC.Pulse = speed;
 8001c42:	9406      	strle	r4, [sp, #24]
        sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c44:	2400      	movle	r4, #0
        HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8001c46:	4622      	mov	r2, r4
 8001c48:	a905      	add	r1, sp, #20
 8001c4a:	4809      	ldr	r0, [pc, #36]	; (8001c70 <main+0x344>)
        sConfigOC.Pulse = 0;
 8001c4c:	bfc8      	it	gt
 8001c4e:	9406      	strgt	r4, [sp, #24]
        sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c50:	f8cd 8014 	str.w	r8, [sp, #20]
        sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c54:	9407      	str	r4, [sp, #28]
        sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c56:	9409      	str	r4, [sp, #36]	; 0x24
        HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8001c58:	f7ff fb98 	bl	800138c <HAL_TIM_PWM_ConfigChannel>
        HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001c5c:	4621      	mov	r1, r4
 8001c5e:	4804      	ldr	r0, [pc, #16]	; (8001c70 <main+0x344>)
 8001c60:	f7ff fc04 	bl	800146c <HAL_TIM_PWM_Start>
        sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c64:	f8cd 8014 	str.w	r8, [sp, #20]
        sConfigOC.Pulse = 0;
 8001c68:	9406      	str	r4, [sp, #24]
        sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6a:	9407      	str	r4, [sp, #28]
        sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c6c:	9409      	str	r4, [sp, #36]	; 0x24
 8001c6e:	e79a      	b.n	8001ba6 <main+0x27a>
 8001c70:	2000002c 	.word	0x2000002c

08001c74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c74:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <HAL_MspInit+0x34>)
 8001c78:	2100      	movs	r1, #0
 8001c7a:	9100      	str	r1, [sp, #0]
 8001c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c82:	645a      	str	r2, [r3, #68]	; 0x44
 8001c84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c86:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c8a:	9200      	str	r2, [sp, #0]
 8001c8c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	9101      	str	r1, [sp, #4]
 8001c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ca2:	b002      	add	sp, #8
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800

08001cac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cac:	b510      	push	{r4, lr}
 8001cae:	4604      	mov	r4, r0
 8001cb0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	2214      	movs	r2, #20
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	a803      	add	r0, sp, #12
 8001cb8:	f000 f938 	bl	8001f2c <memset>
  if(hadc->Instance==ADC1)
 8001cbc:	6822      	ldr	r2, [r4, #0]
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <HAL_ADC_MspInit+0x58>)
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d11d      	bne.n	8001d00 <HAL_ADC_MspInit+0x54>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cc4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001cc8:	2100      	movs	r1, #0
 8001cca:	9101      	str	r1, [sp, #4]
 8001ccc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	480e      	ldr	r0, [pc, #56]	; (8001d08 <HAL_ADC_MspInit+0x5c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cd4:	645a      	str	r2, [r3, #68]	; 0x44
 8001cd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cd8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001cdc:	9201      	str	r2, [sp, #4]
 8001cde:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	9102      	str	r1, [sp, #8]
 8001ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ce4:	f042 0201 	orr.w	r2, r2, #1
 8001ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	9302      	str	r3, [sp, #8]
 8001cf2:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cfa:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f7fe feda 	bl	8000ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d00:	b008      	add	sp, #32
 8001d02:	bd10      	pop	{r4, pc}
 8001d04:	40012000 	.word	0x40012000
 8001d08:	40020000 	.word	0x40020000

08001d0c <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM3)
 8001d0c:	6803      	ldr	r3, [r0, #0]
 8001d0e:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <HAL_TIM_PWM_MspInit+0x48>)
 8001d10:	4293      	cmp	r3, r2
{
 8001d12:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM3)
 8001d14:	d10d      	bne.n	8001d32 <HAL_TIM_PWM_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <HAL_TIM_PWM_MspInit+0x4c>)
 8001d1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d1e:	f042 0202 	orr.w	r2, r2, #2
 8001d22:	641a      	str	r2, [r3, #64]	; 0x40
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d2e:	b002      	add	sp, #8
 8001d30:	4770      	bx	lr
  else if(htim_pwm->Instance==TIM4)
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <HAL_TIM_PWM_MspInit+0x50>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d1fa      	bne.n	8001d2e <HAL_TIM_PWM_MspInit+0x22>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d38:	2300      	movs	r3, #0
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_TIM_PWM_MspInit+0x4c>)
 8001d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d40:	f042 0204 	orr.w	r2, r2, #4
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	9b01      	ldr	r3, [sp, #4]
}
 8001d50:	e7ed      	b.n	8001d2e <HAL_TIM_PWM_MspInit+0x22>
 8001d52:	bf00      	nop
 8001d54:	40000400 	.word	0x40000400
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40000800 	.word	0x40000800

08001d60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d60:	b510      	push	{r4, lr}
 8001d62:	4604      	mov	r4, r0
 8001d64:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d66:	2214      	movs	r2, #20
 8001d68:	2100      	movs	r1, #0
 8001d6a:	a803      	add	r0, sp, #12
 8001d6c:	f000 f8de 	bl	8001f2c <memset>
  if(htim->Instance==TIM3)
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	4a15      	ldr	r2, [pc, #84]	; (8001dc8 <HAL_TIM_MspPostInit+0x68>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d116      	bne.n	8001da6 <HAL_TIM_MspPostInit+0x46>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d78:	2300      	movs	r3, #0
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_TIM_MspPostInit+0x6c>)
 8001d7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d80:	f042 0202 	orr.w	r2, r2, #2
 8001d84:	631a      	str	r2, [r3, #48]	; 0x30
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	9b01      	ldr	r3, [sp, #4]
    /**TIM3 GPIO Configuration    
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001d90:	2330      	movs	r3, #48	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d92:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d94:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <HAL_TIM_MspPostInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d9c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9e:	f7fe fe89 	bl	8000ab4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001da2:	b008      	add	sp, #32
 8001da4:	bd10      	pop	{r4, pc}
  else if(htim->Instance==TIM4)
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <HAL_TIM_MspPostInit+0x74>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d1fa      	bne.n	8001da2 <HAL_TIM_MspPostInit+0x42>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dac:	2300      	movs	r3, #0
 8001dae:	9302      	str	r3, [sp, #8]
 8001db0:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_TIM_MspPostInit+0x6c>)
 8001db2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001db4:	f042 0202 	orr.w	r2, r2, #2
 8001db8:	631a      	str	r2, [r3, #48]	; 0x30
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	f003 0302 	and.w	r3, r3, #2
 8001dc0:	9302      	str	r3, [sp, #8]
 8001dc2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001dc4:	23c0      	movs	r3, #192	; 0xc0
 8001dc6:	e7e4      	b.n	8001d92 <HAL_TIM_MspPostInit+0x32>
 8001dc8:	40000400 	.word	0x40000400
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020400 	.word	0x40020400
 8001dd4:	40000800 	.word	0x40000800

08001dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd8:	b510      	push	{r4, lr}
 8001dda:	4604      	mov	r4, r0
 8001ddc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dde:	2214      	movs	r2, #20
 8001de0:	2100      	movs	r1, #0
 8001de2:	a803      	add	r0, sp, #12
 8001de4:	f000 f8a2 	bl	8001f2c <memset>
  if(huart->Instance==USART1)
 8001de8:	6822      	ldr	r2, [r4, #0]
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_UART_MspInit+0x74>)
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d12b      	bne.n	8001e48 <HAL_UART_MspInit+0x70>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001df0:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8001df4:	2400      	movs	r4, #0
 8001df6:	9401      	str	r4, [sp, #4]
 8001df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dfa:	4815      	ldr	r0, [pc, #84]	; (8001e50 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dfc:	f042 0210 	orr.w	r2, r2, #16
 8001e00:	645a      	str	r2, [r3, #68]	; 0x44
 8001e02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e04:	f002 0210 	and.w	r2, r2, #16
 8001e08:	9201      	str	r2, [sp, #4]
 8001e0a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0c:	9402      	str	r4, [sp, #8]
 8001e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e10:	f042 0201 	orr.w	r2, r2, #1
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
 8001e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	9302      	str	r3, [sp, #8]
 8001e1e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001e20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e24:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e26:	2302      	movs	r3, #2
 8001e28:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e30:	2307      	movs	r3, #7
 8001e32:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	f7fe fe3e 	bl	8000ab4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e38:	2025      	movs	r0, #37	; 0x25
 8001e3a:	4622      	mov	r2, r4
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	f7fe fdcf 	bl	80009e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e42:	2025      	movs	r0, #37	; 0x25
 8001e44:	f7fe fe00 	bl	8000a48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e48:	b008      	add	sp, #32
 8001e4a:	bd10      	pop	{r4, pc}
 8001e4c:	40011000 	.word	0x40011000
 8001e50:	40020000 	.word	0x40020000

08001e54 <NMI_Handler>:
 8001e54:	4770      	bx	lr

08001e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e56:	e7fe      	b.n	8001e56 <HardFault_Handler>

08001e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e58:	e7fe      	b.n	8001e58 <MemManage_Handler>

08001e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5a:	e7fe      	b.n	8001e5a <BusFault_Handler>

08001e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5c:	e7fe      	b.n	8001e5c <UsageFault_Handler>

08001e5e <SVC_Handler>:
 8001e5e:	4770      	bx	lr

08001e60 <DebugMon_Handler>:
 8001e60:	4770      	bx	lr

08001e62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e62:	4770      	bx	lr

08001e64 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e64:	f7fe bb7e 	b.w	8000564 <HAL_IncTick>

08001e68 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e68:	4801      	ldr	r0, [pc, #4]	; (8001e70 <USART1_IRQHandler+0x8>)
 8001e6a:	f7ff bc67 	b.w	800173c <HAL_UART_IRQHandler>
 8001e6e:	bf00      	nop
 8001e70:	200000fc 	.word	0x200000fc

08001e74 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <SystemInit+0x18>)
 8001e76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001e7a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000ed00 	.word	0xe000ed00

08001e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e96:	e003      	b.n	8001ea0 <LoopCopyDataInit>

08001e98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e9e:	3104      	adds	r1, #4

08001ea0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ea0:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ea4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ea6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ea8:	d3f6      	bcc.n	8001e98 <CopyDataInit>
  ldr  r2, =_sbss
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001eac:	e002      	b.n	8001eb4 <LoopFillZerobss>

08001eae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001eae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001eb0:	f842 3b04 	str.w	r3, [r2], #4

08001eb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001eb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001eb8:	d3f9      	bcc.n	8001eae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eba:	f7ff ffdb 	bl	8001e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ebe:	f000 f811 	bl	8001ee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ec2:	f7ff fd33 	bl	800192c <main>
  bx  lr    
 8001ec6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001ecc:	08001f7c 	.word	0x08001f7c
  ldr  r0, =_sdata
 8001ed0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ed4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001ed8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001edc:	2000013c 	.word	0x2000013c

08001ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <ADC_IRQHandler>
	...

08001ee4 <__libc_init_array>:
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	4e0d      	ldr	r6, [pc, #52]	; (8001f1c <__libc_init_array+0x38>)
 8001ee8:	4c0d      	ldr	r4, [pc, #52]	; (8001f20 <__libc_init_array+0x3c>)
 8001eea:	1ba4      	subs	r4, r4, r6
 8001eec:	10a4      	asrs	r4, r4, #2
 8001eee:	2500      	movs	r5, #0
 8001ef0:	42a5      	cmp	r5, r4
 8001ef2:	d109      	bne.n	8001f08 <__libc_init_array+0x24>
 8001ef4:	4e0b      	ldr	r6, [pc, #44]	; (8001f24 <__libc_init_array+0x40>)
 8001ef6:	4c0c      	ldr	r4, [pc, #48]	; (8001f28 <__libc_init_array+0x44>)
 8001ef8:	f000 f820 	bl	8001f3c <_init>
 8001efc:	1ba4      	subs	r4, r4, r6
 8001efe:	10a4      	asrs	r4, r4, #2
 8001f00:	2500      	movs	r5, #0
 8001f02:	42a5      	cmp	r5, r4
 8001f04:	d105      	bne.n	8001f12 <__libc_init_array+0x2e>
 8001f06:	bd70      	pop	{r4, r5, r6, pc}
 8001f08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f0c:	4798      	blx	r3
 8001f0e:	3501      	adds	r5, #1
 8001f10:	e7ee      	b.n	8001ef0 <__libc_init_array+0xc>
 8001f12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f16:	4798      	blx	r3
 8001f18:	3501      	adds	r5, #1
 8001f1a:	e7f2      	b.n	8001f02 <__libc_init_array+0x1e>
 8001f1c:	08001f74 	.word	0x08001f74
 8001f20:	08001f74 	.word	0x08001f74
 8001f24:	08001f74 	.word	0x08001f74
 8001f28:	08001f78 	.word	0x08001f78

08001f2c <memset>:
 8001f2c:	4402      	add	r2, r0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d100      	bne.n	8001f36 <memset+0xa>
 8001f34:	4770      	bx	lr
 8001f36:	f803 1b01 	strb.w	r1, [r3], #1
 8001f3a:	e7f9      	b.n	8001f30 <memset+0x4>

08001f3c <_init>:
 8001f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f3e:	bf00      	nop
 8001f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f42:	bc08      	pop	{r3}
 8001f44:	469e      	mov	lr, r3
 8001f46:	4770      	bx	lr

08001f48 <_fini>:
 8001f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f4a:	bf00      	nop
 8001f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f4e:	bc08      	pop	{r3}
 8001f50:	469e      	mov	lr, r3
 8001f52:	4770      	bx	lr
